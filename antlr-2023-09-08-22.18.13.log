2023-09-08 22:18:11:085 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-08 22:18:11:133 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-08 22:18:11:998 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT guardstmt { $inst = $guardstmt.gd }) (ALT function {$inst = $function.fun}) (ALT structCreation { $inst = $structCreation.dec }) (ALT callFuncionIns (? (BLOCK (ALT PUNTOCOMA))) {$inst = $callFuncionIns.cf}) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT RETURN expr (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT RETURN (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)}))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVE_IZQ listStructDec LLAVE_DER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID DOSPUNTOS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID DOSPUNTOS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE guardstmt (returns interfaces.Instruction gd) (BLOCK (ALT GUARD expr ELSE LLAVE_IZQ block LLAVE_DER { $gd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID COR_IZQ (= index expr) COR_DER IGUAL (= listan expr) { $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) }) (ALT ID (= op (BLOCK (ALT SUM) (ALT RES))) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE function (returns interfaces.Instruction fun) (BLOCK (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf,environment.NULL, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA types LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA COR_IZQ types COR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.VECTOR, $block.blk)}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID DOSPUNTOS types {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT (= list listParamsFunc) COMA ID DOSPUNTOS COR_IZQ types COR_DER {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID DOSPUNTOS types {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT ID DOSPUNTOS COR_IZQ types COR_DER {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE callFuncionIns (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (BLOCK (ALT MULT) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUM) (ALT RES))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAYIG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MENIG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIFE))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ID PAR_IZQ listStructExp PAR_DER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFuncion {$e = $callFuncion.cf}) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFuncion (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) (? (BLOCK (ALT COMA))) ID DOSPUNTOS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOSPUNTOS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-09-08 22:18:12:018 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT guardstmt { $inst = $guardstmt.gd }) (ALT function {$inst = $function.fun}) (ALT structCreation { $inst = $structCreation.dec }) (ALT callFuncionIns (? (BLOCK (ALT PUNTOCOMA))) {$inst = $callFuncionIns.cf}) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT RETURN expr (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT RETURN (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)}))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVE_IZQ listStructDec LLAVE_DER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID DOSPUNTOS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID DOSPUNTOS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE guardstmt (returns interfaces.Instruction gd) (BLOCK (ALT GUARD expr ELSE LLAVE_IZQ block LLAVE_DER { $gd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID COR_IZQ (= index expr) COR_DER IGUAL (= listan expr) { $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE function (returns interfaces.Instruction fun) (BLOCK (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf,environment.NULL, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA types LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA COR_IZQ types COR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.VECTOR, $block.blk)}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID DOSPUNTOS types {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT (= list listParamsFunc) COMA ID DOSPUNTOS COR_IZQ types COR_DER {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID DOSPUNTOS types {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT ID DOSPUNTOS COR_IZQ types COR_DER {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE callFuncionIns (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ID PAR_IZQ listStructExp PAR_DER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFuncion {$e = $callFuncion.cf}) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFuncion (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) (? (BLOCK (ALT COMA))) ID DOSPUNTOS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOSPUNTOS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-09-08 22:18:12:022 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT guardstmt { $inst = $guardstmt.gd }) (ALT function {$inst = $function.fun}) (ALT structCreation { $inst = $structCreation.dec }) (ALT callFuncionIns (? (BLOCK (ALT PUNTOCOMA))) {$inst = $callFuncionIns.cf}) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT RETURN expr (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT RETURN (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)}))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVE_IZQ listStructDec LLAVE_DER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID DOSPUNTOS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID DOSPUNTOS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE guardstmt (returns interfaces.Instruction gd) (BLOCK (ALT GUARD expr ELSE LLAVE_IZQ block LLAVE_DER { $gd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID COR_IZQ (= index expr) COR_DER IGUAL (= listan expr) { $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE function (returns interfaces.Instruction fun) (BLOCK (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf,environment.NULL, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA types LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA COR_IZQ types COR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.VECTOR, $block.blk)}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID DOSPUNTOS types {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT (= list listParamsFunc) COMA ID DOSPUNTOS COR_IZQ types COR_DER {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID DOSPUNTOS types {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT ID DOSPUNTOS COR_IZQ types COR_DER {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE callFuncionIns (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ID PAR_IZQ listStructExp PAR_DER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFuncion {$e = $callFuncion.cf}) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFuncion (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) (? (BLOCK (ALT COMA))) ID DOSPUNTOS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOSPUNTOS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-09-08 22:18:12:023 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) RULES)
2023-09-08 22:18:12:059 left-recursion LogManager.java:25 listStructDec returns [[]interface{} l]
    :   ( {} VAR<tokenIndex=305> ID<tokenIndex=307> DOSPUNTOS<tokenIndex=309> types<tokenIndex=311> {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    } 
        | { $l = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=291> VAR<tokenIndex=293> ID<tokenIndex=295> DOSPUNTOS<tokenIndex=297> types<tokenIndex=299> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
        )*
    ;
2023-09-08 22:18:12:070 grammar LogManager.java:25 added: (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (VAR (ELEMENT_OPTIONS (= tokenIndex 305))) (ID (ELEMENT_OPTIONS (= tokenIndex 307))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 309))) (types (ELEMENT_OPTIONS (= tokenIndex 311))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 291))) (VAR (ELEMENT_OPTIONS (= tokenIndex 293))) (ID (ELEMENT_OPTIONS (= tokenIndex 295))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 297))) (types (ELEMENT_OPTIONS (= tokenIndex 299))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }))))))
2023-09-08 22:18:12:072 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} lpf]
    :   ( {} ID<tokenIndex=793> DOSPUNTOS<tokenIndex=795> types<tokenIndex=797> {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    } 
        | ID<tokenIndex=803> DOSPUNTOS<tokenIndex=805> COR_IZQ<tokenIndex=807> types<tokenIndex=809> COR_DER<tokenIndex=811> {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    } 
        | { $lpf = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=762> ID<tokenIndex=764> DOSPUNTOS<tokenIndex=766> types<tokenIndex=768> {
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=777> ID<tokenIndex=779> DOSPUNTOS<tokenIndex=781> COR_IZQ<tokenIndex=783> types<tokenIndex=785> COR_DER<tokenIndex=787> {
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }
        )*
    ;
2023-09-08 22:18:12:094 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 793))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 795))) (types (ELEMENT_OPTIONS (= tokenIndex 797))) {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 803))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 805))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 807))) (types (ELEMENT_OPTIONS (= tokenIndex 809))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 811))) {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 762))) (ID (ELEMENT_OPTIONS (= tokenIndex 764))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 766))) (types (ELEMENT_OPTIONS (= tokenIndex 768))) {
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 777))) (ID (ELEMENT_OPTIONS (= tokenIndex 779))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 781))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 783))) (types (ELEMENT_OPTIONS (= tokenIndex 785))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 787))) {
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }))))))
2023-09-08 22:18:12:100 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} RES<tokenIndex=932> left=expr<tokenIndex=936,p=22> { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) } 
        | NOT<tokenIndex=1044> left=expr<tokenIndex=1048,p=16> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)} 
        | ID<tokenIndex=1086> PAR_IZQ<tokenIndex=1088> listStructExp<tokenIndex=1090> PAR_DER<tokenIndex=1092> { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | callFuncion<tokenIndex=1098> {$e = $callFuncion.cf} 
        | PAR_IZQ<tokenIndex=1104> expr<tokenIndex=1106> PAR_DER<tokenIndex=1108> { $e = $expr.e } 
        | conversionstmt<tokenIndex=1114> { $e = $conversionstmt.conv } 
        | ID<tokenIndex=1119> PUNTO<tokenIndex=1121> COUNT<tokenIndex=1123> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)} 
        | ID<tokenIndex=1128> PUNTO<tokenIndex=1130> ISEMPTY<tokenIndex=1132> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)} 
        | list=listArray<tokenIndex=1140> { $e = $list.p} 
        | COR_IZQ<tokenIndex=1146> listParams<tokenIndex=1148> COR_DER<tokenIndex=1150> { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=1156>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1162>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=1168> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=1174> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=1180> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(MULT<tokenIndex=949>|DIV<tokenIndex=951>|MOD<tokenIndex=953>) right=expr<tokenIndex=958,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(SUM<tokenIndex=971>|RES<tokenIndex=973>) right=expr<tokenIndex=978,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MAYIG<tokenIndex=991>|MAYOR<tokenIndex=993>) right=expr<tokenIndex=998,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MENIG<tokenIndex=1011>|MENOR<tokenIndex=1013>) right=expr<tokenIndex=1018,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(IG_IG<tokenIndex=1031>|DIFE<tokenIndex=1033>) right=expr<tokenIndex=1038,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=AND<tokenIndex=1060> right=expr<tokenIndex=1064,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=OR<tokenIndex=1076> right=expr<tokenIndex=1080,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-08 22:18:12:121 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (RES (ELEMENT_OPTIONS (= tokenIndex 932))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 936) (= p 22)))) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 1044))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 1048) (= p 16)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1086))) (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 1088))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 1090))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 1092))) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (callFuncion (ELEMENT_OPTIONS (= tokenIndex 1098))) {$e = $callFuncion.cf}) (ALT (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 1104))) (expr (ELEMENT_OPTIONS (= tokenIndex 1106))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 1108))) { $e = $expr.e }) (ALT (conversionstmt (ELEMENT_OPTIONS (= tokenIndex 1114))) { $e = $conversionstmt.conv }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1119))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1121))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 1123))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1128))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1130))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 1132))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 1140)))) { $e = $list.p}) (ALT (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 1146))) (listParams (ELEMENT_OPTIONS (= tokenIndex 1148))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 1150))) { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1156))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1162))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 1168))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 1174))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1180))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (MULT (ELEMENT_OPTIONS (= tokenIndex 949))) (DIV (ELEMENT_OPTIONS (= tokenIndex 951))) (MOD (ELEMENT_OPTIONS (= tokenIndex 953))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 958) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 971))) (RES (ELEMENT_OPTIONS (= tokenIndex 973))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 978) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MAYIG (ELEMENT_OPTIONS (= tokenIndex 991))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 993))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 998) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MENIG (ELEMENT_OPTIONS (= tokenIndex 1011))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1013))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1018) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1031))) (DIFE (ELEMENT_OPTIONS (= tokenIndex 1033))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1038) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1060)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1064) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1076)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1080) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-08 22:18:12:122 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1281> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1273> expr<tokenIndex=1275> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-08 22:18:12:148 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1281))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1273))) (expr (ELEMENT_OPTIONS (= tokenIndex 1275))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-08 22:18:12:149 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1323> { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COR_IZQ<tokenIndex=1300> expr<tokenIndex=1302> COR_DER<tokenIndex=1304> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1315> ID<tokenIndex=1317> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
        )*
    ;
2023-09-08 22:18:12:156 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1323))) { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 1300))) (expr (ELEMENT_OPTIONS (= tokenIndex 1302))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 1304))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1315))) (ID (ELEMENT_OPTIONS (= tokenIndex 1317))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }))))))
2023-09-08 22:18:12:161 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1367>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1359> expr<tokenIndex=1361> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-09-08 22:18:12:170 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1367))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1359))) (expr (ELEMENT_OPTIONS (= tokenIndex 1361))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-09-08 22:18:12:172 left-recursion LogManager.java:25 listStructExp returns [[]interface{} l]
    :   ( {} ID<tokenIndex=1403> DOSPUNTOS<tokenIndex=1405> expr<tokenIndex=1407>{
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> (COMA<tokenIndex=1389>)? ID<tokenIndex=1393> DOSPUNTOS<tokenIndex=1395> expr<tokenIndex=1397> {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }
        )*
    ;
2023-09-08 22:18:12:178 grammar LogManager.java:25 added: (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1403))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 1405))) (expr (ELEMENT_OPTIONS (= tokenIndex 1407))) {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (? (BLOCK (ALT (COMA (ELEMENT_OPTIONS (= tokenIndex 1389)))))) (ID (ELEMENT_OPTIONS (= tokenIndex 1393))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 1395))) (expr (ELEMENT_OPTIONS (= tokenIndex 1397))) {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }))))))
2023-09-08 22:18:12:220 grammar LogManager.java:25 import INT=1
2023-09-08 22:18:12:220 grammar LogManager.java:25 import FLOAT=2
2023-09-08 22:18:12:220 grammar LogManager.java:25 import BOOL=3
2023-09-08 22:18:12:220 grammar LogManager.java:25 import STR=4
2023-09-08 22:18:12:220 grammar LogManager.java:25 import TRU=5
2023-09-08 22:18:12:221 grammar LogManager.java:25 import FAL=6
2023-09-08 22:18:12:221 grammar LogManager.java:25 import PRINT=7
2023-09-08 22:18:12:221 grammar LogManager.java:25 import IF=8
2023-09-08 22:18:12:221 grammar LogManager.java:25 import ELSE=9
2023-09-08 22:18:12:221 grammar LogManager.java:25 import WHILE=10
2023-09-08 22:18:12:221 grammar LogManager.java:25 import FOR=11
2023-09-08 22:18:12:221 grammar LogManager.java:25 import IN=12
2023-09-08 22:18:12:221 grammar LogManager.java:25 import VAR=13
2023-09-08 22:18:12:222 grammar LogManager.java:25 import LET=14
2023-09-08 22:18:12:222 grammar LogManager.java:25 import NIL=15
2023-09-08 22:18:12:222 grammar LogManager.java:25 import BREAK=16
2023-09-08 22:18:12:222 grammar LogManager.java:25 import CONTINUE=17
2023-09-08 22:18:12:222 grammar LogManager.java:25 import APPEND=18
2023-09-08 22:18:12:222 grammar LogManager.java:25 import REMOVELAST=19
2023-09-08 22:18:12:222 grammar LogManager.java:25 import REMOVE=20
2023-09-08 22:18:12:223 grammar LogManager.java:25 import AT=21
2023-09-08 22:18:12:223 grammar LogManager.java:25 import ISEMPTY=22
2023-09-08 22:18:12:223 grammar LogManager.java:25 import COUNT=23
2023-09-08 22:18:12:223 grammar LogManager.java:25 import ARRAY=24
2023-09-08 22:18:12:223 grammar LogManager.java:25 import RETURN=25
2023-09-08 22:18:12:223 grammar LogManager.java:25 import FUNC=26
2023-09-08 22:18:12:223 grammar LogManager.java:25 import STRUCT=27
2023-09-08 22:18:12:223 grammar LogManager.java:25 import GUARD=28
2023-09-08 22:18:12:223 grammar LogManager.java:25 import NUMBER=29
2023-09-08 22:18:12:223 grammar LogManager.java:25 import STRING=30
2023-09-08 22:18:12:223 grammar LogManager.java:25 import ID=31
2023-09-08 22:18:12:224 grammar LogManager.java:25 import DIFE=32
2023-09-08 22:18:12:224 grammar LogManager.java:25 import IG_IG=33
2023-09-08 22:18:12:224 grammar LogManager.java:25 import NOT=34
2023-09-08 22:18:12:224 grammar LogManager.java:25 import OR=35
2023-09-08 22:18:12:224 grammar LogManager.java:25 import AND=36
2023-09-08 22:18:12:224 grammar LogManager.java:25 import IGUAL=37
2023-09-08 22:18:12:224 grammar LogManager.java:25 import MAYIG=38
2023-09-08 22:18:12:224 grammar LogManager.java:25 import MENIG=39
2023-09-08 22:18:12:224 grammar LogManager.java:25 import MAYOR=40
2023-09-08 22:18:12:224 grammar LogManager.java:25 import MENOR=41
2023-09-08 22:18:12:225 grammar LogManager.java:25 import MULT=42
2023-09-08 22:18:12:225 grammar LogManager.java:25 import DIV=43
2023-09-08 22:18:12:225 grammar LogManager.java:25 import SUM=44
2023-09-08 22:18:12:225 grammar LogManager.java:25 import RES=45
2023-09-08 22:18:12:225 grammar LogManager.java:25 import MOD=46
2023-09-08 22:18:12:225 grammar LogManager.java:25 import PAR_IZQ=47
2023-09-08 22:18:12:225 grammar LogManager.java:25 import PAR_DER=48
2023-09-08 22:18:12:225 grammar LogManager.java:25 import LLAVE_IZQ=49
2023-09-08 22:18:12:226 grammar LogManager.java:25 import LLAVE_DER=50
2023-09-08 22:18:12:226 grammar LogManager.java:25 import DOSPUNTOS=51
2023-09-08 22:18:12:226 grammar LogManager.java:25 import COR_IZQ=52
2023-09-08 22:18:12:226 grammar LogManager.java:25 import COR_DER=53
2023-09-08 22:18:12:226 grammar LogManager.java:25 import COMA=54
2023-09-08 22:18:12:226 grammar LogManager.java:25 import CIERRAPREGUNTA=55
2023-09-08 22:18:12:226 grammar LogManager.java:25 import PUNTOCOMA=56
2023-09-08 22:18:12:226 grammar LogManager.java:25 import PUNTO=57
2023-09-08 22:18:12:226 grammar LogManager.java:25 import FLECHA=58
2023-09-08 22:18:12:226 grammar LogManager.java:25 import WHITESPACE=59
2023-09-08 22:18:12:227 grammar LogManager.java:25 import COMMENT=60
2023-09-08 22:18:12:227 grammar LogManager.java:25 import LINE_COMMENT=61
2023-09-08 22:18:12:227 grammar LogManager.java:25 import 'Int'=1
2023-09-08 22:18:12:227 grammar LogManager.java:25 import 'Float'=2
2023-09-08 22:18:12:227 grammar LogManager.java:25 import 'Bool'=3
2023-09-08 22:18:12:227 grammar LogManager.java:25 import 'String'=4
2023-09-08 22:18:12:228 grammar LogManager.java:25 import 'true'=5
2023-09-08 22:18:12:228 grammar LogManager.java:25 import 'false'=6
2023-09-08 22:18:12:228 grammar LogManager.java:25 import 'print'=7
2023-09-08 22:18:12:228 grammar LogManager.java:25 import 'if'=8
2023-09-08 22:18:12:228 grammar LogManager.java:25 import 'else'=9
2023-09-08 22:18:12:228 grammar LogManager.java:25 import 'while'=10
2023-09-08 22:18:12:228 grammar LogManager.java:25 import 'for'=11
2023-09-08 22:18:12:228 grammar LogManager.java:25 import 'in'=12
2023-09-08 22:18:12:229 grammar LogManager.java:25 import 'var'=13
2023-09-08 22:18:12:229 grammar LogManager.java:25 import 'let'=14
2023-09-08 22:18:12:229 grammar LogManager.java:25 import 'nil'=15
2023-09-08 22:18:12:229 grammar LogManager.java:25 import 'break'=16
2023-09-08 22:18:12:229 grammar LogManager.java:25 import 'continue'=17
2023-09-08 22:18:12:229 grammar LogManager.java:25 import 'append'=18
2023-09-08 22:18:12:229 grammar LogManager.java:25 import 'removeLast'=19
2023-09-08 22:18:12:229 grammar LogManager.java:25 import 'remove'=20
2023-09-08 22:18:12:229 grammar LogManager.java:25 import 'at'=21
2023-09-08 22:18:12:229 grammar LogManager.java:25 import 'isEmpty'=22
2023-09-08 22:18:12:230 grammar LogManager.java:25 import 'count'=23
2023-09-08 22:18:12:230 grammar LogManager.java:25 import 'array'=24
2023-09-08 22:18:12:230 grammar LogManager.java:25 import 'return'=25
2023-09-08 22:18:12:230 grammar LogManager.java:25 import 'func'=26
2023-09-08 22:18:12:230 grammar LogManager.java:25 import 'struct'=27
2023-09-08 22:18:12:230 grammar LogManager.java:25 import 'guard'=28
2023-09-08 22:18:12:230 grammar LogManager.java:25 import '!='=32
2023-09-08 22:18:12:230 grammar LogManager.java:25 import '=='=33
2023-09-08 22:18:12:231 grammar LogManager.java:25 import '!'=34
2023-09-08 22:18:12:231 grammar LogManager.java:25 import '||'=35
2023-09-08 22:18:12:231 grammar LogManager.java:25 import '&&'=36
2023-09-08 22:18:12:231 grammar LogManager.java:25 import '='=37
2023-09-08 22:18:12:231 grammar LogManager.java:25 import '>='=38
2023-09-08 22:18:12:231 grammar LogManager.java:25 import '<='=39
2023-09-08 22:18:12:231 grammar LogManager.java:25 import '>'=40
2023-09-08 22:18:12:231 grammar LogManager.java:25 import '<'=41
2023-09-08 22:18:12:231 grammar LogManager.java:25 import '*'=42
2023-09-08 22:18:12:231 grammar LogManager.java:25 import '/'=43
2023-09-08 22:18:12:232 grammar LogManager.java:25 import '+'=44
2023-09-08 22:18:12:232 grammar LogManager.java:25 import '-'=45
2023-09-08 22:18:12:232 grammar LogManager.java:25 import '%'=46
2023-09-08 22:18:12:232 grammar LogManager.java:25 import '('=47
2023-09-08 22:18:12:232 grammar LogManager.java:25 import ')'=48
2023-09-08 22:18:12:232 grammar LogManager.java:25 import '{'=49
2023-09-08 22:18:12:232 grammar LogManager.java:25 import '}'=50
2023-09-08 22:18:12:232 grammar LogManager.java:25 import ':'=51
2023-09-08 22:18:12:232 grammar LogManager.java:25 import '['=52
2023-09-08 22:18:12:232 grammar LogManager.java:25 import ']'=53
2023-09-08 22:18:12:233 grammar LogManager.java:25 import ','=54
2023-09-08 22:18:12:233 grammar LogManager.java:25 import '?'=55
2023-09-08 22:18:12:233 grammar LogManager.java:25 import ';'=56
2023-09-08 22:18:12:233 grammar LogManager.java:25 import '.'=57
2023-09-08 22:18:12:233 grammar LogManager.java:25 import '->'=58
2023-09-08 22:18:12:234 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, RETURN=25, FUNC=26, STRUCT=27, GUARD=28, NUMBER=29, STRING=30, ID=31, DIFE=32, IG_IG=33, NOT=34, OR=35, AND=36, IGUAL=37, MAYIG=38, MENIG=39, MAYOR=40, MENOR=41, MULT=42, DIV=43, SUM=44, RES=45, MOD=46, PAR_IZQ=47, PAR_DER=48, LLAVE_IZQ=49, LLAVE_DER=50, DOSPUNTOS=51, COR_IZQ=52, COR_DER=53, COMA=54, CIERRAPREGUNTA=55, PUNTOCOMA=56, PUNTO=57, FLECHA=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'isEmpty'=22, 'count'=23, 'array'=24, 'return'=25, 'func'=26, 'struct'=27, 'guard'=28, '!='=32, '=='=33, '!'=34, '||'=35, '&&'=36, '='=37, '>='=38, '<='=39, '>'=40, '<'=41, '*'=42, '/'=43, '+'=44, '-'=45, '%'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '?'=55, ';'=56, '.'=57, '->'=58}
2023-09-08 22:18:12:235 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, RETURN=25, FUNC=26, STRUCT=27, GUARD=28, NUMBER=29, STRING=30, ID=31, DIFE=32, IG_IG=33, NOT=34, OR=35, AND=36, IGUAL=37, MAYIG=38, MENIG=39, MAYOR=40, MENOR=41, MULT=42, DIV=43, SUM=44, RES=45, MOD=46, PAR_IZQ=47, PAR_DER=48, LLAVE_IZQ=49, LLAVE_DER=50, DOSPUNTOS=51, COR_IZQ=52, COR_DER=53, COMA=54, CIERRAPREGUNTA=55, PUNTOCOMA=56, PUNTO=57, FLECHA=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61}
2023-09-08 22:18:12:235 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'isEmpty'=22, 'count'=23, 'array'=24, 'return'=25, 'func'=26, 'struct'=27, 'guard'=28, '!='=32, '=='=33, '!'=34, '||'=35, '&&'=36, '='=37, '>='=38, '<='=39, '>'=40, '<'=41, '*'=42, '/'=43, '+'=44, '-'=45, '%'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '?'=55, ';'=56, '.'=57, '->'=58}
2023-09-08 22:18:12:315 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-08 22:18:12:316 LL1 LogManager.java:25 look=[{7..8, 10..11, 13..14, 16..17, 25..28, 31}, {<EOF>, 50}]
2023-09-08 22:18:12:316 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:316 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-08 22:18:12:317 LL1 LogManager.java:25 look=[56, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:317 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:317 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-09-08 22:18:12:317 LL1 LogManager.java:25 look=[56, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:317 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:317 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-09-08 22:18:12:318 LL1 LogManager.java:25 look=[56, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:318 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:318 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-09-08 22:18:12:318 LL1 LogManager.java:25 look=[56, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:318 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:318 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-09-08 22:18:12:318 LL1 LogManager.java:25 look=[56, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:319 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:319 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-09-08 22:18:12:319 LL1 LogManager.java:25 look=[56, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:319 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:319 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2023-09-08 22:18:12:319 LL1 LogManager.java:25 look=[56, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:320 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:320 LL1 LogManager.java:25 
DECISION 8 in rule instruction
2023-09-08 22:18:12:320 LL1 LogManager.java:25 look=[56, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:320 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:320 LL1 LogManager.java:25 
DECISION 9 in rule instruction
2023-09-08 22:18:12:320 LL1 LogManager.java:25 look=[56, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:320 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:320 LL1 LogManager.java:25 
DECISION 10 in rule instruction
2023-09-08 22:18:12:320 LL1 LogManager.java:25 look=[56, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:321 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:321 LL1 LogManager.java:25 
DECISION 11 in rule instruction
2023-09-08 22:18:12:321 LL1 LogManager.java:25 look=[56, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:321 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:321 LL1 LogManager.java:25 
DECISION 12 in rule instruction
2023-09-08 22:18:12:321 LL1 LogManager.java:25 look=[7, 8, {13..14}, 31, 10, 11, 28, 26, 27, 31, 16, 17, 31, 31, 31, 25, 25]
2023-09-08 22:18:12:321 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:321 LL1 LogManager.java:25 
DECISION 13 in rule listStructDec
2023-09-08 22:18:12:321 LL1 LogManager.java:25 look=[13, null]
2023-09-08 22:18:12:321 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:321 LL1 LogManager.java:25 
DECISION 14 in rule listStructDec
2023-09-08 22:18:12:321 LL1 LogManager.java:25 look=[null, 50]
2023-09-08 22:18:12:321 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:321 LL1 LogManager.java:25 
DECISION 15 in rule blockelsif
2023-09-08 22:18:12:321 LL1 LogManager.java:25 look=[8, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 31, 50}]
2023-09-08 22:18:12:321 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:322 LL1 LogManager.java:25 
DECISION 16 in rule ifstmt
2023-09-08 22:18:12:322 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-08 22:18:12:322 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:322 LL1 LogManager.java:25 
DECISION 17 in rule declarationstmt
2023-09-08 22:18:12:322 LL1 LogManager.java:25 look=[13, 13, 13, 13, 13, 14, 14]
2023-09-08 22:18:12:322 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:322 LL1 LogManager.java:25 
DECISION 18 in rule asignationstmt
2023-09-08 22:18:12:322 LL1 LogManager.java:25 look=[31, 31, 31]
2023-09-08 22:18:12:322 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:322 LL1 LogManager.java:25 
DECISION 19 in rule function
2023-09-08 22:18:12:322 LL1 LogManager.java:25 look=[26, 26, 26]
2023-09-08 22:18:12:322 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:322 LL1 LogManager.java:25 
DECISION 20 in rule listParamsFunc
2023-09-08 22:18:12:322 LL1 LogManager.java:25 look=[31, 31, null]
2023-09-08 22:18:12:322 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:322 LL1 LogManager.java:25 
DECISION 21 in rule listParamsFunc
2023-09-08 22:18:12:323 LL1 LogManager.java:25 look=[null, null]
2023-09-08 22:18:12:323 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:323 LL1 LogManager.java:25 
DECISION 22 in rule listParamsFunc
2023-09-08 22:18:12:323 LL1 LogManager.java:25 look=[null, 48]
2023-09-08 22:18:12:323 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:323 LL1 LogManager.java:25 
DECISION 23 in rule types
2023-09-08 22:18:12:323 LL1 LogManager.java:25 look=[1, 2, 4, 3]
2023-09-08 22:18:12:323 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:323 LL1 LogManager.java:25 
DECISION 24 in rule typesmatriz
2023-09-08 22:18:12:323 LL1 LogManager.java:25 look=[52, {1..4}]
2023-09-08 22:18:12:323 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:323 LL1 LogManager.java:25 
DECISION 25 in rule exprFor
2023-09-08 22:18:12:323 LL1 LogManager.java:25 look=[{1..2, 4..6, 15, 29..31, 34, 45, 47, 52}, {1..2, 4..6, 15, 29..31, 34, 45, 47, 52}]
2023-09-08 22:18:12:323 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:323 LL1 LogManager.java:25 
DECISION 26 in rule expr
2023-09-08 22:18:12:324 LL1 LogManager.java:25 look=[45, 34, 31, 31, 47, {1..2, 4}, 31, 31, 31, 52, 29, 30, 5, 6, 15]
2023-09-08 22:18:12:324 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:324 LL1 LogManager.java:25 
DECISION 27 in rule expr
2023-09-08 22:18:12:324 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-08 22:18:12:324 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:324 LL1 LogManager.java:25 
DECISION 28 in rule expr
2023-09-08 22:18:12:324 LL1 LogManager.java:25 look=[null, null]
2023-09-08 22:18:12:324 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:324 LL1 LogManager.java:25 
DECISION 29 in rule conversionstmt
2023-09-08 22:18:12:324 LL1 LogManager.java:25 look=[1, 2, 4]
2023-09-08 22:18:12:324 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:324 LL1 LogManager.java:25 
DECISION 30 in rule exprvector
2023-09-08 22:18:12:324 LL1 LogManager.java:25 look=[52, 52, 31]
2023-09-08 22:18:12:324 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:324 LL1 LogManager.java:25 
DECISION 31 in rule listParams
2023-09-08 22:18:12:324 LL1 LogManager.java:25 look=[null, {48, 53}]
2023-09-08 22:18:12:324 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:325 LL1 LogManager.java:25 
DECISION 32 in rule listArray
2023-09-08 22:18:12:325 LL1 LogManager.java:25 look=[null, null]
2023-09-08 22:18:12:325 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:325 LL1 LogManager.java:25 
DECISION 33 in rule listArray
2023-09-08 22:18:12:325 LL1 LogManager.java:25 look=[null, null]
2023-09-08 22:18:12:325 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:325 LL1 LogManager.java:25 
DECISION 34 in rule listParamsCall
2023-09-08 22:18:12:325 LL1 LogManager.java:25 look=[{1..2, 4..6, 15, 29..31, 34, 45, 47, 52}, null]
2023-09-08 22:18:12:325 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:325 LL1 LogManager.java:25 
DECISION 35 in rule listParamsCall
2023-09-08 22:18:12:325 LL1 LogManager.java:25 look=[null, 48]
2023-09-08 22:18:12:325 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:325 LL1 LogManager.java:25 
DECISION 36 in rule listStructExp
2023-09-08 22:18:12:325 LL1 LogManager.java:25 look=[31, null]
2023-09-08 22:18:12:325 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:325 LL1 LogManager.java:25 
DECISION 37 in rule listStructExp
2023-09-08 22:18:12:325 LL1 LogManager.java:25 look=[54, 31]
2023-09-08 22:18:12:325 LL1 LogManager.java:25 LL(1)? true
2023-09-08 22:18:12:325 LL1 LogManager.java:25 
DECISION 38 in rule listStructExp
2023-09-08 22:18:12:326 LL1 LogManager.java:25 look=[null, 48]
2023-09-08 22:18:12:326 LL1 LogManager.java:25 LL(1)? false
2023-09-08 22:18:12:334 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 22:18:12:357 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-08 22:18:12:357 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-09-08 22:18:12:359 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-09-08 22:18:12:361 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-08 22:18:12:361 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-09-08 22:18:12:365 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-08 22:18:12:366 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-09-08 22:18:12:366 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-09-08 22:18:12:375 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-08 22:18:12:376 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:27]
2023-09-08 22:18:12:376 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:35].[@-1,20:23='prnt',<0>,39:45]
2023-09-08 22:18:12:376 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-08 22:18:12:376 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-09-08 22:18:12:376 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-09-08 22:18:12:379 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-08 22:18:12:380 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:33]
2023-09-08 22:18:12:380 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:41].[@-1,26:28='dec',<0>,41:57]
2023-09-08 22:18:12:381 action-translator LogManager.java:25 translate  $inst = $asignationstmt.asig 
2023-09-08 22:18:12:382 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:32]
2023-09-08 22:18:12:382 action-translator LogManager.java:25 qattr [@-1,10:23='asignationstmt',<0>,42:40].[@-1,25:28='asig',<0>,42:55]
2023-09-08 22:18:12:382 action-translator LogManager.java:25 translate  $inst = $whilestmt.whileinst 
2023-09-08 22:18:12:382 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-09-08 22:18:12:382 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:28='whileinst',<0>,43:32]
2023-09-08 22:18:12:383 action-translator LogManager.java:25 translate  $inst = $forstmt.forinst 
2023-09-08 22:18:12:383 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-09-08 22:18:12:383 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:24='forinst',<0>,44:28]
2023-09-08 22:18:12:383 action-translator LogManager.java:25 translate  $inst = $guardstmt.gd 
2023-09-08 22:18:12:383 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:14]
2023-09-08 22:18:12:384 action-translator LogManager.java:25 qattr [@-1,10:18='guardstmt',<0>,45:22].[@-1,20:21='gd',<0>,45:32]
2023-09-08 22:18:12:384 action-translator LogManager.java:25 translate $inst = $function.fun
2023-09-08 22:18:12:384 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:12]
2023-09-08 22:18:12:384 action-translator LogManager.java:25 qattr [@-1,9:16='function',<0>,46:20].[@-1,18:20='fun',<0>,46:29]
2023-09-08 22:18:12:385 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2023-09-08 22:18:12:385 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:19]
2023-09-08 22:18:12:385 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,47:27].[@-1,25:27='dec',<0>,47:42]
2023-09-08 22:18:12:386 action-translator LogManager.java:25 translate $inst = $callFuncionIns.cf
2023-09-08 22:18:12:386 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,48:31]
2023-09-08 22:18:12:386 action-translator LogManager.java:25 qattr [@-1,9:22='callFuncionIns',<0>,48:39].[@-1,24:25='cf',<0>,48:54]
2023-09-08 22:18:12:387 action-translator LogManager.java:25 translate $inst = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-09-08 22:18:12:387 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,49:22]
2023-09-08 22:18:12:387 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,49:52].[@-1,37:40='line',<0>,49:58]
2023-09-08 22:18:12:388 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,49:65].[@-1,50:52='pos',<0>,49:71]
2023-09-08 22:18:12:388 action-translator LogManager.java:25 translate $inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-08 22:18:12:389 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,50:25]
2023-09-08 22:18:12:389 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,50:58].[@-1,43:46='line',<0>,50:67]
2023-09-08 22:18:12:389 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,50:74].[@-1,59:61='pos',<0>,50:83]
2023-09-08 22:18:12:390 action-translator LogManager.java:25 translate $inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-08 22:18:12:390 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,51:53]
2023-09-08 22:18:12:390 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,51:84].[@-1,35:38='line',<0>,51:87]
2023-09-08 22:18:12:390 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,51:94].[@-1,45:47='pos',<0>,51:97]
2023-09-08 22:18:12:390 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,51:103].[@-1,54:57='text',<0>,51:106]
2023-09-08 22:18:12:390 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,51:113].[@-1,66:66='e',<0>,51:118]
2023-09-08 22:18:12:391 action-translator LogManager.java:25 translate $inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)
2023-09-08 22:18:12:391 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,52:52]
2023-09-08 22:18:12:391 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,52:87].[@-1,39:42='line',<0>,52:90]
2023-09-08 22:18:12:391 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,52:97].[@-1,49:51='pos',<0>,52:100]
2023-09-08 22:18:12:392 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,52:106].[@-1,58:61='text',<0>,52:109]
2023-09-08 22:18:12:392 action-translator LogManager.java:25 translate $inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-08 22:18:12:393 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,53:66]
2023-09-08 22:18:12:393 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,53:99].[@-1,37:40='line',<0>,53:102]
2023-09-08 22:18:12:393 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,53:109].[@-1,47:49='pos',<0>,53:112]
2023-09-08 22:18:12:393 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,53:118].[@-1,56:59='text',<0>,53:121]
2023-09-08 22:18:12:393 action-translator LogManager.java:25 qattr [@-1,63:66='expr',<0>,53:128].[@-1,68:68='e',<0>,53:133]
2023-09-08 22:18:12:394 action-translator LogManager.java:25 translate $inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)
2023-09-08 22:18:12:394 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,54:28]
2023-09-08 22:18:12:395 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,54:59].[@-1,39:42='line',<0>,54:66]
2023-09-08 22:18:12:395 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,54:73].[@-1,53:55='pos',<0>,54:80]
2023-09-08 22:18:12:395 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,54:86].[@-1,64:64='e',<0>,54:91]
2023-09-08 22:18:12:396 action-translator LogManager.java:25 translate $inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)
2023-09-08 22:18:12:396 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,55:23]
2023-09-08 22:18:12:396 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,55:54].[@-1,39:42='line',<0>,55:61]
2023-09-08 22:18:12:397 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,55:68].[@-1,53:55='pos',<0>,55:75]
2023-09-08 22:18:12:399 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2023-09-08 22:18:12:399 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,59:48]
2023-09-08 22:18:12:399 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,59:78].[@-1,39:42='line',<0>,59:85]
2023-09-08 22:18:12:399 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,59:92].[@-1,53:55='pos',<0>,59:99]
2023-09-08 22:18:12:400 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,59:105].[@-1,62:65='text',<0>,59:108]
2023-09-08 22:18:12:400 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,59:115].[@-1,83:83='l',<0>,59:129]
2023-09-08 22:18:12:401 action-translator LogManager.java:25 translate 
2023-09-08 22:18:12:402 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    
2023-09-08 22:18:12:402 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,4:64].[@-1,116:119='text',<0>,4:67]
2023-09-08 22:18:12:402 action-translator LogManager.java:25 qattr [@-1,123:127='types',<0>,4:74].[@-1,129:130='ty',<0>,4:80]
2023-09-08 22:18:12:402 action-translator LogManager.java:25 attr [@-1,213:213='l',<0>,6:25]
2023-09-08 22:18:12:402 action-translator LogManager.java:25 translate  $l = []interface{}{} 
2023-09-08 22:18:12:403 action-translator LogManager.java:25 attr [@-1,2:2='l',<0>,8:12]
2023-09-08 22:18:12:403 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 22:18:12:404 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-09-08 22:18:12:404 action-translator LogManager.java:25 qattr [@-1,181:182='ID',<0>,13:98].[@-1,184:187='text',<0>,13:101]
2023-09-08 22:18:12:404 action-translator LogManager.java:25 qattr [@-1,191:195='types',<0>,13:108].[@-1,197:198='ty',<0>,13:114]
2023-09-08 22:18:12:404 action-translator LogManager.java:25 qattr [@-1,274:277='list',<0>,14:72].[@-1,279:279='l',<0>,14:77]
2023-09-08 22:18:12:404 action-translator LogManager.java:25 attr [@-1,353:353='l',<0>,15:59]
2023-09-08 22:18:12:406 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 22:18:12:408 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)
2023-09-08 22:18:12:408 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,79:37]
2023-09-08 22:18:12:414 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,79:67].[@-1,38:41='line',<0>,79:73]
2023-09-08 22:18:12:414 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,79:79].[@-1,50:52='pos',<0>,79:85]
2023-09-08 22:18:12:414 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,79:90].[@-1,66:66='l',<0>,79:101]
2023-09-08 22:18:12:415 action-translator LogManager.java:25 translate 
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    
2023-09-08 22:18:12:415 action-translator LogManager.java:25 attr [@-1,7:11='blkif',<0>,84:5]
2023-09-08 22:18:12:416 action-translator LogManager.java:25 translate 
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    
2023-09-08 22:18:12:416 action-translator LogManager.java:25 attr [@-1,113:117='blkif',<0>,91:13]
2023-09-08 22:18:12:416 action-translator LogManager.java:25 attr [@-1,129:133='blkif',<0>,91:29]
2023-09-08 22:18:12:419 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-09-08 22:18:12:420 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,97:38]
2023-09-08 22:18:12:420 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,97:67].[@-1,34:37='line',<0>,97:70]
2023-09-08 22:18:12:421 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,97:77].[@-1,44:46='pos',<0>,97:80]
2023-09-08 22:18:12:421 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,97:86].[@-1,55:55='e',<0>,97:91]
2023-09-08 22:18:12:421 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,97:95].[@-1,65:67='blk',<0>,97:101]
2023-09-08 22:18:12:422 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)
2023-09-08 22:18:12:422 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,98:84]
2023-09-08 22:18:12:422 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,98:113].[@-1,33:36='line',<0>,98:116]
2023-09-08 22:18:12:422 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,98:123].[@-1,43:45='pos',<0>,98:126]
2023-09-08 22:18:12:422 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,98:132].[@-1,54:54='e',<0>,98:137]
2023-09-08 22:18:12:422 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,98:141].[@-1,65:67='blk',<0>,98:148]
2023-09-08 22:18:12:422 action-translator LogManager.java:25 qattr [@-1,71:78='elseblck',<0>,98:154].[@-1,80:82='blk',<0>,98:163]
2023-09-08 22:18:12:423 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)
2023-09-08 22:18:12:423 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,99:60]
2023-09-08 22:18:12:423 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,99:89].[@-1,33:36='line',<0>,99:92]
2023-09-08 22:18:12:424 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,99:99].[@-1,43:45='pos',<0>,99:102]
2023-09-08 22:18:12:424 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,99:108].[@-1,54:54='e',<0>,99:113]
2023-09-08 22:18:12:424 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,99:117].[@-1,65:67='blk',<0>,99:124]
2023-09-08 22:18:12:424 action-translator LogManager.java:25 qattr [@-1,71:80='blockelsif',<0>,99:130].[@-1,82:86='blkif',<0>,99:141]
2023-09-08 22:18:12:425 action-translator LogManager.java:25 translate  $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-08 22:18:12:425 action-translator LogManager.java:25 attr [@-1,2:10='whileinst',<0>,103:41]
2023-09-08 22:18:12:426 action-translator LogManager.java:25 qattr [@-1,37:41='WHILE',<0>,103:76].[@-1,43:46='line',<0>,103:82]
2023-09-08 22:18:12:426 action-translator LogManager.java:25 qattr [@-1,50:54='WHILE',<0>,103:89].[@-1,56:58='pos',<0>,103:95]
2023-09-08 22:18:12:426 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,103:101].[@-1,67:67='e',<0>,103:106]
2023-09-08 22:18:12:427 action-translator LogManager.java:25 qattr [@-1,71:75='block',<0>,103:110].[@-1,77:79='blk',<0>,103:116]
2023-09-08 22:18:12:427 action-translator LogManager.java:25 translate  $gd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) 
2023-09-08 22:18:12:427 action-translator LogManager.java:25 attr [@-1,2:3='gd',<0>,107:46]
2023-09-08 22:18:12:428 action-translator LogManager.java:25 qattr [@-1,30:34='GUARD',<0>,107:74].[@-1,36:39='line',<0>,107:80]
2023-09-08 22:18:12:428 action-translator LogManager.java:25 qattr [@-1,43:47='GUARD',<0>,107:87].[@-1,49:51='pos',<0>,107:93]
2023-09-08 22:18:12:428 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,107:99].[@-1,60:60='e',<0>,107:104]
2023-09-08 22:18:12:428 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,107:108].[@-1,70:72='blk',<0>,107:114]
2023-09-08 22:18:12:429 action-translator LogManager.java:25 translate $forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)
2023-09-08 22:18:12:430 action-translator LogManager.java:25 attr [@-1,1:7='forinst',<0>,111:47]
2023-09-08 22:18:12:430 action-translator LogManager.java:25 qattr [@-1,32:34='FOR',<0>,111:78].[@-1,36:39='line',<0>,111:82]
2023-09-08 22:18:12:430 action-translator LogManager.java:25 qattr [@-1,43:45='FOR',<0>,111:89].[@-1,47:49='pos',<0>,111:93]
2023-09-08 22:18:12:431 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,111:99].[@-1,56:59='text',<0>,111:102]
2023-09-08 22:18:12:432 action-translator LogManager.java:25 qattr [@-1,63:69='exprFor',<0>,111:109].[@-1,71:71='e',<0>,111:117]
2023-09-08 22:18:12:432 action-translator LogManager.java:25 qattr [@-1,75:79='block',<0>,111:121].[@-1,81:83='blk',<0>,111:127]
2023-09-08 22:18:12:434 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) 
2023-09-08 22:18:12:434 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,115:39]
2023-09-08 22:18:12:434 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,115:74].[@-1,41:44='line',<0>,115:78]
2023-09-08 22:18:12:435 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,115:85].[@-1,52:54='pos',<0>,115:89]
2023-09-08 22:18:12:436 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,115:95].[@-1,61:64='text',<0>,115:98]
2023-09-08 22:18:12:436 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,115:110].[@-1,79:80='ty',<0>,115:116]
2023-09-08 22:18:12:436 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,115:121].[@-1,89:89='e',<0>,115:126]
2023-09-08 22:18:12:437 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) 
2023-09-08 22:18:12:437 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,116:22]
2023-09-08 22:18:12:437 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,116:57].[@-1,41:44='line',<0>,116:61]
2023-09-08 22:18:12:438 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,116:68].[@-1,52:54='pos',<0>,116:72]
2023-09-08 22:18:12:438 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,116:78].[@-1,61:64='text',<0>,116:81]
2023-09-08 22:18:12:438 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,116:117].[@-1,102:102='e',<0>,116:122]
2023-09-08 22:18:12:439 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) 
2023-09-08 22:18:12:439 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,117:42]
2023-09-08 22:18:12:439 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,117:77].[@-1,41:44='line',<0>,117:81]
2023-09-08 22:18:12:439 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,117:88].[@-1,52:54='pos',<0>,117:92]
2023-09-08 22:18:12:439 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,117:98].[@-1,61:64='text',<0>,117:101]
2023-09-08 22:18:12:439 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,117:113].[@-1,79:80='ty',<0>,117:119]
2023-09-08 22:18:12:440 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) 
2023-09-08 22:18:12:440 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,118:60]
2023-09-08 22:18:12:440 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,118:101].[@-1,47:50='line',<0>,118:105]
2023-09-08 22:18:12:440 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,118:112].[@-1,58:60='pos',<0>,118:116]
2023-09-08 22:18:12:440 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,118:122].[@-1,67:70='text',<0>,118:125]
2023-09-08 22:18:12:440 action-translator LogManager.java:25 qattr [@-1,79:83='types',<0>,118:137].[@-1,85:86='ty',<0>,118:143]
2023-09-08 22:18:12:440 action-translator LogManager.java:25 qattr [@-1,90:99='exprvector',<0>,118:148].[@-1,101:105='exprv',<0>,118:159]
2023-09-08 22:18:12:441 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) 
2023-09-08 22:18:12:441 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,119:44]
2023-09-08 22:18:12:441 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,119:85].[@-1,47:50='line',<0>,119:89]
2023-09-08 22:18:12:441 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,119:96].[@-1,58:60='pos',<0>,119:100]
2023-09-08 22:18:12:441 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,119:106].[@-1,67:70='text',<0>,119:109]
2023-09-08 22:18:12:441 action-translator LogManager.java:25 qattr [@-1,79:89='typesmatriz',<0>,119:121].[@-1,91:92='tm',<0>,119:133]
2023-09-08 22:18:12:442 action-translator LogManager.java:25 qattr [@-1,96:99='expr',<0>,119:138].[@-1,101:101='e',<0>,119:143]
2023-09-08 22:18:12:442 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) 
2023-09-08 22:18:12:442 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,120:38]
2023-09-08 22:18:12:443 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,120:73].[@-1,41:44='line',<0>,120:77]
2023-09-08 22:18:12:443 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,120:84].[@-1,52:54='pos',<0>,120:88]
2023-09-08 22:18:12:443 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,120:94].[@-1,61:64='text',<0>,120:97]
2023-09-08 22:18:12:443 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,120:110].[@-1,80:81='ty',<0>,120:116]
2023-09-08 22:18:12:443 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,120:121].[@-1,90:90='e',<0>,120:126]
2023-09-08 22:18:12:443 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) 
2023-09-08 22:18:12:444 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,121:22]
2023-09-08 22:18:12:444 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,121:57].[@-1,41:44='line',<0>,121:61]
2023-09-08 22:18:12:444 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,121:68].[@-1,52:54='pos',<0>,121:72]
2023-09-08 22:18:12:444 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,121:78].[@-1,61:64='text',<0>,121:81]
2023-09-08 22:18:12:444 action-translator LogManager.java:25 qattr [@-1,98:101='expr',<0>,121:118].[@-1,103:103='e',<0>,121:123]
2023-09-08 22:18:12:445 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-08 22:18:12:445 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,125:18]
2023-09-08 22:18:12:446 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,125:53].[@-1,40:43='line',<0>,125:56]
2023-09-08 22:18:12:446 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,125:63].[@-1,50:52='pos',<0>,125:66]
2023-09-08 22:18:12:446 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,125:72].[@-1,59:62='text',<0>,125:75]
2023-09-08 22:18:12:446 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,125:82].[@-1,71:71='e',<0>,125:87]
2023-09-08 22:18:12:446 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) 
2023-09-08 22:18:12:447 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,126:52]
2023-09-08 22:18:12:447 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,126:98].[@-1,51:54='line',<0>,126:101]
2023-09-08 22:18:12:447 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,126:108].[@-1,61:63='pos',<0>,126:111]
2023-09-08 22:18:12:448 action-translator LogManager.java:25 qattr [@-1,67:68='ID',<0>,126:117].[@-1,70:73='text',<0>,126:120]
2023-09-08 22:18:12:448 action-translator LogManager.java:25 qattr [@-1,77:81='index',<0>,126:127].[@-1,83:83='e',<0>,126:133]
2023-09-08 22:18:12:449 action-translator LogManager.java:25 qattr [@-1,87:92='listan',<0>,126:137].[@-1,94:94='e',<0>,126:144]
2023-09-08 22:18:12:450 action-translator LogManager.java:25 translate $asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)
2023-09-08 22:18:12:450 action-translator LogManager.java:25 attr [@-1,1:4='asig',<0>,127:30]
2023-09-08 22:18:12:450 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,127:74].[@-1,48:51='line',<0>,127:77]
2023-09-08 22:18:12:450 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,127:84].[@-1,58:60='pos',<0>,127:87]
2023-09-08 22:18:12:450 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,127:93].[@-1,67:70='text',<0>,127:96]
2023-09-08 22:18:12:450 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,127:103].[@-1,79:79='e',<0>,127:108]
2023-09-08 22:18:12:451 action-translator LogManager.java:25 qattr [@-1,83:84='op',<0>,127:112].[@-1,86:89='text',<0>,127:115]
2023-09-08 22:18:12:452 action-translator LogManager.java:25 translate $fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf,environment.NULL, $block.blk)
2023-09-08 22:18:12:452 action-translator LogManager.java:25 attr [@-1,1:3='fun',<0>,132:68]
2023-09-08 22:18:12:453 action-translator LogManager.java:25 qattr [@-1,32:35='FUNC',<0>,132:99].[@-1,37:40='line',<0>,132:104]
2023-09-08 22:18:12:453 action-translator LogManager.java:25 qattr [@-1,44:47='FUNC',<0>,132:111].[@-1,49:51='pos',<0>,132:116]
2023-09-08 22:18:12:453 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,132:122].[@-1,58:61='text',<0>,132:125]
2023-09-08 22:18:12:453 action-translator LogManager.java:25 qattr [@-1,65:78='listParamsFunc',<0>,132:132].[@-1,80:82='lpf',<0>,132:147]
2023-09-08 22:18:12:453 action-translator LogManager.java:25 qattr [@-1,103:107='block',<0>,132:170].[@-1,109:111='blk',<0>,132:176]
2023-09-08 22:18:12:454 action-translator LogManager.java:25 translate $fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
2023-09-08 22:18:12:454 action-translator LogManager.java:25 attr [@-1,1:3='fun',<0>,133:81]
2023-09-08 22:18:12:454 action-translator LogManager.java:25 qattr [@-1,32:35='FUNC',<0>,133:112].[@-1,37:40='line',<0>,133:117]
2023-09-08 22:18:12:454 action-translator LogManager.java:25 qattr [@-1,44:47='FUNC',<0>,133:124].[@-1,49:51='pos',<0>,133:129]
2023-09-08 22:18:12:454 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,133:135].[@-1,58:61='text',<0>,133:138]
2023-09-08 22:18:12:454 action-translator LogManager.java:25 qattr [@-1,65:78='listParamsFunc',<0>,133:145].[@-1,80:82='lpf',<0>,133:160]
2023-09-08 22:18:12:454 action-translator LogManager.java:25 qattr [@-1,86:90='types',<0>,133:166].[@-1,92:93='ty',<0>,133:172]
2023-09-08 22:18:12:454 action-translator LogManager.java:25 qattr [@-1,97:101='block',<0>,133:177].[@-1,103:105='blk',<0>,133:183]
2023-09-08 22:18:12:455 action-translator LogManager.java:25 translate $fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.VECTOR, $block.blk)
2023-09-08 22:18:12:455 action-translator LogManager.java:25 attr [@-1,1:3='fun',<0>,134:97]
2023-09-08 22:18:12:455 action-translator LogManager.java:25 qattr [@-1,32:35='FUNC',<0>,134:128].[@-1,37:40='line',<0>,134:133]
2023-09-08 22:18:12:455 action-translator LogManager.java:25 qattr [@-1,44:47='FUNC',<0>,134:140].[@-1,49:51='pos',<0>,134:145]
2023-09-08 22:18:12:455 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,134:151].[@-1,58:61='text',<0>,134:154]
2023-09-08 22:18:12:456 action-translator LogManager.java:25 qattr [@-1,65:78='listParamsFunc',<0>,134:161].[@-1,80:82='lpf',<0>,134:176]
2023-09-08 22:18:12:456 action-translator LogManager.java:25 qattr [@-1,106:110='block',<0>,134:202].[@-1,112:114='blk',<0>,134:208]
2023-09-08 22:18:12:457 action-translator LogManager.java:25 translate 
2023-09-08 22:18:12:457 action-translator LogManager.java:25 translate 
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    
2023-09-08 22:18:12:457 action-translator LogManager.java:25 attr [@-1,7:9='lpf',<0>,3:5]
2023-09-08 22:18:12:462 action-translator LogManager.java:25 qattr [@-1,85:86='ID',<0>,4:55].[@-1,88:91='line',<0>,4:58]
2023-09-08 22:18:12:462 action-translator LogManager.java:25 qattr [@-1,95:96='ID',<0>,4:65].[@-1,98:100='pos',<0>,4:68]
2023-09-08 22:18:12:462 action-translator LogManager.java:25 qattr [@-1,104:105='ID',<0>,4:74].[@-1,107:110='text',<0>,4:77]
2023-09-08 22:18:12:462 action-translator LogManager.java:25 qattr [@-1,114:118='types',<0>,4:84].[@-1,120:121='ty',<0>,4:90]
2023-09-08 22:18:12:462 action-translator LogManager.java:25 attr [@-1,130:132='lpf',<0>,5:5]
2023-09-08 22:18:12:463 action-translator LogManager.java:25 attr [@-1,144:146='lpf',<0>,5:19]
2023-09-08 22:18:12:463 action-translator LogManager.java:25 translate 
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    
2023-09-08 22:18:12:464 action-translator LogManager.java:25 attr [@-1,7:9='lpf',<0>,8:5]
2023-09-08 22:18:12:465 action-translator LogManager.java:25 qattr [@-1,85:86='ID',<0>,9:55].[@-1,88:91='line',<0>,9:58]
2023-09-08 22:18:12:465 action-translator LogManager.java:25 qattr [@-1,95:96='ID',<0>,9:65].[@-1,98:100='pos',<0>,9:68]
2023-09-08 22:18:12:465 action-translator LogManager.java:25 qattr [@-1,104:105='ID',<0>,9:74].[@-1,107:110='text',<0>,9:77]
2023-09-08 22:18:12:465 action-translator LogManager.java:25 attr [@-1,139:141='lpf',<0>,10:5]
2023-09-08 22:18:12:465 action-translator LogManager.java:25 attr [@-1,153:155='lpf',<0>,10:19]
2023-09-08 22:18:12:466 action-translator LogManager.java:25 translate  $lpf = []interface{}{} 
2023-09-08 22:18:12:466 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,12:12]
2023-09-08 22:18:12:466 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-09-08 22:18:12:466 action-translator LogManager.java:25 translate 
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              
2023-09-08 22:18:12:467 action-translator LogManager.java:25 qattr [@-1,104:105='ID',<0>,17:65].[@-1,107:110='line',<0>,17:68]
2023-09-08 22:18:12:467 action-translator LogManager.java:25 qattr [@-1,114:115='ID',<0>,17:75].[@-1,117:119='pos',<0>,17:78]
2023-09-08 22:18:12:467 action-translator LogManager.java:25 qattr [@-1,123:124='ID',<0>,17:84].[@-1,126:129='text',<0>,17:87]
2023-09-08 22:18:12:467 action-translator LogManager.java:25 qattr [@-1,133:137='types',<0>,17:94].[@-1,139:140='ty',<0>,17:100]
2023-09-08 22:18:12:467 action-translator LogManager.java:25 qattr [@-1,172:175='list',<0>,18:28].[@-1,177:179='lpf',<0>,18:33]
2023-09-08 22:18:12:468 action-translator LogManager.java:25 attr [@-1,208:210='lpf',<0>,19:15]
2023-09-08 22:18:12:468 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-09-08 22:18:12:468 action-translator LogManager.java:25 translate 
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
              arr = append($list.lpf, newParam)
              $lpf = arr
              
2023-09-08 22:18:12:468 action-translator LogManager.java:25 qattr [@-1,104:105='ID',<0>,23:65].[@-1,107:110='line',<0>,23:68]
2023-09-08 22:18:12:468 action-translator LogManager.java:25 qattr [@-1,114:115='ID',<0>,23:75].[@-1,117:119='pos',<0>,23:78]
2023-09-08 22:18:12:469 action-translator LogManager.java:25 qattr [@-1,123:124='ID',<0>,23:84].[@-1,126:129='text',<0>,23:87]
2023-09-08 22:18:12:469 action-translator LogManager.java:25 qattr [@-1,181:184='list',<0>,24:28].[@-1,186:188='lpf',<0>,24:33]
2023-09-08 22:18:12:469 action-translator LogManager.java:25 attr [@-1,217:219='lpf',<0>,25:15]
2023-09-08 22:18:12:469 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-09-08 22:18:12:469 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-09-08 22:18:12:470 action-translator LogManager.java:25 translate  $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-09-08 22:18:12:470 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,164:38]
2023-09-08 22:18:12:470 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,164:74].[@-1,41:44='line',<0>,164:77]
2023-09-08 22:18:12:470 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,164:84].[@-1,51:53='pos',<0>,164:87]
2023-09-08 22:18:12:470 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,164:93].[@-1,60:63='text',<0>,164:96]
2023-09-08 22:18:12:470 action-translator LogManager.java:25 qattr [@-1,67:80='listParamsCall',<0>,164:103].[@-1,82:82='l',<0>,164:118]
2023-09-08 22:18:12:471 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-08 22:18:12:471 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,168:8]
2023-09-08 22:18:12:471 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-08 22:18:12:471 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,169:10]
2023-09-08 22:18:12:471 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-08 22:18:12:471 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,170:8]
2023-09-08 22:18:12:471 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-08 22:18:12:472 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,171:9]
2023-09-08 22:18:12:472 action-translator LogManager.java:25 translate 
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            
2023-09-08 22:18:12:473 action-translator LogManager.java:25 qattr [@-1,191:194='list',<0>,178:46].[@-1,196:197='tm',<0>,178:51]
2023-09-08 22:18:12:473 action-translator LogManager.java:25 attr [@-1,243:244='tm',<0>,179:33]
2023-09-08 22:18:12:473 action-translator LogManager.java:25 translate 
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        
2023-09-08 22:18:12:473 action-translator LogManager.java:25 attr [@-1,15:16='tm',<0>,182:13]
2023-09-08 22:18:12:473 action-translator LogManager.java:25 qattr [@-1,86:90='types',<0>,183:49].[@-1,92:93='ty',<0>,183:55]
2023-09-08 22:18:12:473 action-translator LogManager.java:25 attr [@-1,110:111='tm',<0>,184:13]
2023-09-08 22:18:12:473 action-translator LogManager.java:25 attr [@-1,123:124='tm',<0>,184:26]
2023-09-08 22:18:12:474 action-translator LogManager.java:25 translate $e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)
2023-09-08 22:18:12:475 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,189:44]
2023-09-08 22:18:12:476 action-translator LogManager.java:25 qattr [@-1,30:35='range1',<0>,189:73].[@-1,37:41='start',<0>,189:80]
2023-09-08 22:18:12:476 action-translator LogManager.java:25 qattr [@-1,55:60='range1',<0>,189:98].[@-1,62:66='start',<0>,189:105]
2023-09-08 22:18:12:476 action-translator LogManager.java:25 qattr [@-1,82:87='range1',<0>,189:125].[@-1,89:89='e',<0>,189:132]
2023-09-08 22:18:12:476 action-translator LogManager.java:25 qattr [@-1,93:98='range2',<0>,189:136].[@-1,100:100='e',<0>,189:143]
2023-09-08 22:18:12:476 action-translator LogManager.java:25 translate $e = $expr.e
2023-09-08 22:18:12:476 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,190:7]
2023-09-08 22:18:12:476 action-translator LogManager.java:25 qattr [@-1,6:9='expr',<0>,190:12].[@-1,11:11='e',<0>,190:17]
2023-09-08 22:18:12:479 action-translator LogManager.java:25 translate 
2023-09-08 22:18:12:481 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) 
2023-09-08 22:18:12:481 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:66]
2023-09-08 22:18:12:481 action-translator LogManager.java:25 qattr [@-1,32:34='RES',<0>,2:96].[@-1,36:39='line',<0>,2:100]
2023-09-08 22:18:12:481 action-translator LogManager.java:25 qattr [@-1,43:45='RES',<0>,2:107].[@-1,47:49='pos',<0>,2:111]
2023-09-08 22:18:12:482 action-translator LogManager.java:25 qattr [@-1,53:56='left',<0>,2:117].[@-1,58:58='e',<0>,2:122]
2023-09-08 22:18:12:482 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)
2023-09-08 22:18:12:482 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:64]
2023-09-08 22:18:12:482 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:94].[@-1,35:38='line',<0>,3:98]
2023-09-08 22:18:12:482 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:105].[@-1,46:48='pos',<0>,3:109]
2023-09-08 22:18:12:482 action-translator LogManager.java:25 qattr [@-1,52:55='left',<0>,3:115].[@-1,57:57='e',<0>,3:120]
2023-09-08 22:18:12:483 action-translator LogManager.java:25 qattr [@-1,61:63='NOT',<0>,3:124].[@-1,65:68='text',<0>,3:128]
2023-09-08 22:18:12:483 action-translator LogManager.java:25 translate  $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2023-09-08 22:18:12:483 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:113]
2023-09-08 22:18:12:483 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,4:143].[@-1,35:38='line',<0>,4:146]
2023-09-08 22:18:12:483 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,4:153].[@-1,45:47='pos',<0>,4:156]
2023-09-08 22:18:12:483 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,4:162].[@-1,54:57='text',<0>,4:165]
2023-09-08 22:18:12:483 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,4:172].[@-1,75:75='l',<0>,4:186]
2023-09-08 22:18:12:484 action-translator LogManager.java:25 translate $e = $callFuncion.cf
2023-09-08 22:18:12:484 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,5:40]
2023-09-08 22:18:12:484 action-translator LogManager.java:25 qattr [@-1,6:16='callFuncion',<0>,5:45].[@-1,18:19='cf',<0>,5:57]
2023-09-08 22:18:12:484 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-08 22:18:12:484 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:84]
2023-09-08 22:18:12:484 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,6:89].[@-1,12:12='e',<0>,6:94]
2023-09-08 22:18:12:485 action-translator LogManager.java:25 translate  $e = $conversionstmt.conv 
2023-09-08 22:18:12:485 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:44]
2023-09-08 22:18:12:485 action-translator LogManager.java:25 qattr [@-1,7:20='conversionstmt',<0>,7:49].[@-1,22:25='conv',<0>,7:64]
2023-09-08 22:18:12:485 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)
2023-09-08 22:18:12:485 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:78]
2023-09-08 22:18:12:486 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,8:104].[@-1,31:34='line',<0>,8:107]
2023-09-08 22:18:12:486 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,8:114].[@-1,41:43='pos',<0>,8:117]
2023-09-08 22:18:12:486 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,8:123].[@-1,50:53='text',<0>,8:126]
2023-09-08 22:18:12:486 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)
2023-09-08 22:18:12:486 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,9:80]
2023-09-08 22:18:12:486 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,9:108].[@-1,33:36='line',<0>,9:111]
2023-09-08 22:18:12:487 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,9:118].[@-1,43:45='pos',<0>,9:121]
2023-09-08 22:18:12:487 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,9:127].[@-1,52:55='text',<0>,9:130]
2023-09-08 22:18:12:487 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-08 22:18:12:487 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,10:44]
2023-09-08 22:18:12:487 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,10:49].[@-1,12:12='p',<0>,10:54]
2023-09-08 22:18:12:488 action-translator LogManager.java:25 translate  $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 22:18:12:488 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,11:90]
2023-09-08 22:18:12:489 action-translator LogManager.java:25 qattr [@-1,28:34='COR_IZQ',<0>,11:116].[@-1,36:39='line',<0>,11:124]
2023-09-08 22:18:12:489 action-translator LogManager.java:25 qattr [@-1,43:49='COR_IZQ',<0>,11:131].[@-1,51:53='pos',<0>,11:139]
2023-09-08 22:18:12:490 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,11:145].[@-1,68:68='l',<0>,11:156]
2023-09-08 22:18:12:491 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-08 22:18:12:491 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,14:30].[@-1,39:42='text',<0>,14:37]
2023-09-08 22:18:12:491 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,15:43].[@-1,102:105='text',<0>,15:50]
2023-09-08 22:18:12:491 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,19:13]
2023-09-08 22:18:12:491 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,19:43].[@-1,240:243='line',<0>,19:50]
2023-09-08 22:18:12:491 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,19:56].[@-1,253:255='pos',<0>,19:63]
2023-09-08 22:18:12:491 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,21:37].[@-1,341:344='text',<0>,21:44]
2023-09-08 22:18:12:491 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,25:13]
2023-09-08 22:18:12:491 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,25:43].[@-1,474:477='line',<0>,25:50]
2023-09-08 22:18:12:491 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,25:56].[@-1,487:489='pos',<0>,25:63]
2023-09-08 22:18:12:492 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-08 22:18:12:492 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,30:16].[@-1,25:28='text',<0>,30:23]
2023-09-08 22:18:12:492 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,31:9]
2023-09-08 22:18:12:492 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,31:39].[@-1,77:80='line',<0>,31:46]
2023-09-08 22:18:12:492 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,31:53].[@-1,91:93='pos',<0>,31:60]
2023-09-08 22:18:12:492 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-08 22:18:12:493 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:33]
2023-09-08 22:18:12:493 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,33:63].[@-1,36:39='line',<0>,33:67]
2023-09-08 22:18:12:493 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,33:74].[@-1,47:49='pos',<0>,33:78]
2023-09-08 22:18:12:493 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-08 22:18:12:493 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:33]
2023-09-08 22:18:12:493 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,34:63].[@-1,36:39='line',<0>,34:67]
2023-09-08 22:18:12:493 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,34:74].[@-1,47:49='pos',<0>,34:78]
2023-09-08 22:18:12:494 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-09-08 22:18:12:494 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:33]
2023-09-08 22:18:12:494 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,35:63].[@-1,36:39='line',<0>,35:67]
2023-09-08 22:18:12:494 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,35:74].[@-1,47:49='pos',<0>,35:78]
2023-09-08 22:18:12:494 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-08 22:18:12:495 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 22:18:12:495 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:160]
2023-09-08 22:18:12:495 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:190].[@-1,37:41='start',<0>,38:195]
2023-09-08 22:18:12:495 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:213].[@-1,60:64='start',<0>,38:218]
2023-09-08 22:18:12:496 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:238].[@-1,85:85='e',<0>,38:243]
2023-09-08 22:18:12:496 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:247].[@-1,92:95='text',<0>,38:250]
2023-09-08 22:18:12:496 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:257].[@-1,105:105='e',<0>,38:263]
2023-09-08 22:18:12:496 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-08 22:18:12:497 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 22:18:12:497 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:149]
2023-09-08 22:18:12:497 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:179].[@-1,37:41='start',<0>,39:184]
2023-09-08 22:18:12:497 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:202].[@-1,60:64='start',<0>,39:207]
2023-09-08 22:18:12:497 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:227].[@-1,85:85='e',<0>,39:232]
2023-09-08 22:18:12:498 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:236].[@-1,92:95='text',<0>,39:239]
2023-09-08 22:18:12:498 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:246].[@-1,105:105='e',<0>,39:252]
2023-09-08 22:18:12:498 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 22:18:12:498 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 22:18:12:498 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:153]
2023-09-08 22:18:12:498 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:183].[@-1,37:41='start',<0>,40:188]
2023-09-08 22:18:12:499 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:206].[@-1,60:64='start',<0>,40:211]
2023-09-08 22:18:12:499 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:231].[@-1,85:85='e',<0>,40:236]
2023-09-08 22:18:12:499 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:240].[@-1,92:95='text',<0>,40:243]
2023-09-08 22:18:12:499 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:250].[@-1,105:105='e',<0>,40:256]
2023-09-08 22:18:12:499 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 22:18:12:499 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 22:18:12:500 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:156]
2023-09-08 22:18:12:500 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:186].[@-1,37:41='start',<0>,41:191]
2023-09-08 22:18:12:500 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:209].[@-1,60:64='start',<0>,41:214]
2023-09-08 22:18:12:500 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:234].[@-1,85:85='e',<0>,41:239]
2023-09-08 22:18:12:500 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:243].[@-1,92:95='text',<0>,41:246]
2023-09-08 22:18:12:500 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:253].[@-1,105:105='e',<0>,41:259]
2023-09-08 22:18:12:502 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 22:18:12:508 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 22:18:12:508 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:155]
2023-09-08 22:18:12:508 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:185].[@-1,37:41='start',<0>,42:190]
2023-09-08 22:18:12:509 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:208].[@-1,60:64='start',<0>,42:213]
2023-09-08 22:18:12:509 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:233].[@-1,85:85='e',<0>,42:238]
2023-09-08 22:18:12:509 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:242].[@-1,92:95='text',<0>,42:245]
2023-09-08 22:18:12:509 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:252].[@-1,105:105='e',<0>,42:258]
2023-09-08 22:18:12:510 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 22:18:12:510 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 22:18:12:510 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:129]
2023-09-08 22:18:12:510 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:159].[@-1,37:41='start',<0>,43:164]
2023-09-08 22:18:12:510 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:182].[@-1,60:64='start',<0>,43:187]
2023-09-08 22:18:12:510 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:207].[@-1,85:85='e',<0>,43:212]
2023-09-08 22:18:12:510 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:216].[@-1,92:95='text',<0>,43:219]
2023-09-08 22:18:12:510 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:226].[@-1,105:105='e',<0>,43:232]
2023-09-08 22:18:12:510 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-08 22:18:12:511 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 22:18:12:511 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:128]
2023-09-08 22:18:12:511 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:158].[@-1,37:41='start',<0>,44:163]
2023-09-08 22:18:12:511 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:181].[@-1,60:64='start',<0>,44:186]
2023-09-08 22:18:12:512 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:206].[@-1,85:85='e',<0>,44:211]
2023-09-08 22:18:12:512 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:215].[@-1,92:95='text',<0>,44:218]
2023-09-08 22:18:12:512 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:225].[@-1,105:105='e',<0>,44:231]
2023-09-08 22:18:12:512 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-08 22:18:12:512 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-08 22:18:12:512 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 22:18:12:513 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 22:18:12:513 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 22:18:12:513 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 22:18:12:513 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-08 22:18:12:514 action-translator LogManager.java:25 translate  $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) 
2023-09-08 22:18:12:515 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,238:29]
2023-09-08 22:18:12:515 action-translator LogManager.java:25 qattr [@-1,31:33='INT',<0>,238:58].[@-1,35:38='line',<0>,238:62]
2023-09-08 22:18:12:515 action-translator LogManager.java:25 qattr [@-1,42:44='INT',<0>,238:69].[@-1,46:48='pos',<0>,238:73]
2023-09-08 22:18:12:515 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,238:79].[@-1,57:57='e',<0>,238:84]
2023-09-08 22:18:12:515 action-translator LogManager.java:25 translate  $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) 
2023-09-08 22:18:12:516 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,239:31]
2023-09-08 22:18:12:516 action-translator LogManager.java:25 qattr [@-1,33:37='FLOAT',<0>,239:62].[@-1,39:42='line',<0>,239:68]
2023-09-08 22:18:12:516 action-translator LogManager.java:25 qattr [@-1,46:50='FLOAT',<0>,239:75].[@-1,52:54='pos',<0>,239:81]
2023-09-08 22:18:12:516 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,239:87].[@-1,63:63='e',<0>,239:92]
2023-09-08 22:18:12:516 action-translator LogManager.java:25 translate  $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) 
2023-09-08 22:18:12:517 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,240:29]
2023-09-08 22:18:12:517 action-translator LogManager.java:25 qattr [@-1,34:36='STR',<0>,240:61].[@-1,38:41='line',<0>,240:65]
2023-09-08 22:18:12:517 action-translator LogManager.java:25 qattr [@-1,45:47='STR',<0>,240:72].[@-1,49:51='pos',<0>,240:76]
2023-09-08 22:18:12:517 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,240:82].[@-1,60:60='e',<0>,240:87]
2023-09-08 22:18:12:518 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 22:18:12:518 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,244:31]
2023-09-08 22:18:12:518 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,244:62].[@-1,41:44='line',<0>,244:70]
2023-09-08 22:18:12:518 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,244:77].[@-1,56:58='pos',<0>,244:85]
2023-09-08 22:18:12:518 action-translator LogManager.java:25 qattr [@-1,62:71='listParams',<0>,244:91].[@-1,73:73='l',<0>,244:102]
2023-09-08 22:18:12:519 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) 
2023-09-08 22:18:12:519 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,245:20]
2023-09-08 22:18:12:519 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,245:51].[@-1,41:44='line',<0>,245:59]
2023-09-08 22:18:12:519 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,245:66].[@-1,56:58='pos',<0>,245:74]
2023-09-08 22:18:12:519 action-translator LogManager.java:25 translate  $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 22:18:12:519 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,246:7]
2023-09-08 22:18:12:519 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,246:42].[@-1,40:43='line',<0>,246:45]
2023-09-08 22:18:12:519 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,246:52].[@-1,50:52='pos',<0>,246:55]
2023-09-08 22:18:12:520 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,246:61].[@-1,59:62='text',<0>,246:64]
2023-09-08 22:18:12:521 action-translator LogManager.java:25 translate 
2023-09-08 22:18:12:521 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-08 22:18:12:521 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-08 22:18:12:521 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-08 22:18:12:521 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-08 22:18:12:521 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-08 22:18:12:522 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 22:18:12:522 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-08 22:18:12:522 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-08 22:18:12:522 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-08 22:18:12:523 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-08 22:18:12:524 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 22:18:12:524 action-translator LogManager.java:25 translate 
2023-09-08 22:18:12:524 action-translator LogManager.java:25 translate  $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 22:18:12:525 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-09-08 22:18:12:525 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:66].[@-1,36:39='line',<0>,2:69]
2023-09-08 22:18:12:525 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:76].[@-1,46:48='pos',<0>,2:79]
2023-09-08 22:18:12:525 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:85].[@-1,55:58='text',<0>,2:88]
2023-09-08 22:18:12:526 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 22:18:12:526 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-08 22:18:12:526 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:132]
2023-09-08 22:18:12:526 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:164].[@-1,39:43='start',<0>,5:169]
2023-09-08 22:18:12:526 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:187].[@-1,62:66='start',<0>,5:192]
2023-09-08 22:18:12:527 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:212].[@-1,87:87='p',<0>,5:217]
2023-09-08 22:18:12:527 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:221].[@-1,96:96='e',<0>,5:226]
2023-09-08 22:18:12:528 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 22:18:12:528 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2023-09-08 22:18:12:528 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2023-09-08 22:18:12:528 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2023-09-08 22:18:12:528 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2023-09-08 22:18:12:528 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2023-09-08 22:18:12:529 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2023-09-08 22:18:12:529 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 22:18:12:529 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 22:18:12:529 action-translator LogManager.java:25 translate  $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-09-08 22:18:12:530 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,268:38]
2023-09-08 22:18:12:530 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,268:74].[@-1,41:44='line',<0>,268:77]
2023-09-08 22:18:12:532 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,268:84].[@-1,51:53='pos',<0>,268:87]
2023-09-08 22:18:12:532 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,268:93].[@-1,60:63='text',<0>,268:96]
2023-09-08 22:18:12:532 action-translator LogManager.java:25 qattr [@-1,67:80='listParamsCall',<0>,268:103].[@-1,82:82='l',<0>,268:118]
2023-09-08 22:18:12:533 action-translator LogManager.java:25 translate 
2023-09-08 22:18:12:533 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-08 22:18:12:533 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-08 22:18:12:533 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-08 22:18:12:533 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-08 22:18:12:534 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-08 22:18:12:534 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-09-08 22:18:12:534 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-09-08 22:18:12:534 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 22:18:12:534 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-09-08 22:18:12:535 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-09-08 22:18:12:535 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-09-08 22:18:12:535 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-09-08 22:18:12:535 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 22:18:12:536 action-translator LogManager.java:25 translate 
2023-09-08 22:18:12:536 action-translator LogManager.java:25 translate 
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                
2023-09-08 22:18:12:536 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:60].[@-1,108:111='text',<0>,4:63]
2023-09-08 22:18:12:536 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,4:70].[@-1,120:120='e',<0>,4:75]
2023-09-08 22:18:12:536 action-translator LogManager.java:25 attr [@-1,192:192='l',<0>,6:21]
2023-09-08 22:18:12:536 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-09-08 22:18:12:536 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,9:9]
2023-09-08 22:18:12:537 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 22:18:12:537 action-translator LogManager.java:25 translate 
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  
2023-09-08 22:18:12:537 action-translator LogManager.java:25 qattr [@-1,173:174='ID',<0>,15:94].[@-1,176:179='text',<0>,15:97]
2023-09-08 22:18:12:537 action-translator LogManager.java:25 qattr [@-1,183:186='expr',<0>,15:104].[@-1,188:188='e',<0>,15:109]
2023-09-08 22:18:12:537 action-translator LogManager.java:25 qattr [@-1,260:263='list',<0>,16:68].[@-1,265:265='l',<0>,16:73]
2023-09-08 22:18:12:538 action-translator LogManager.java:25 attr [@-1,332:332='l',<0>,17:55]
2023-09-08 22:18:12:538 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 22:18:13:230 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 22:18:13:230 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 22:18:13:428 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 22:18:13:428 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

