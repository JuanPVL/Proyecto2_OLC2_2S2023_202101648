2023-10-30 16:29:35:876 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE CHAR (BLOCK (ALT '\'' (~ (SET ['])) '\''))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-10-30 16:29:36:000 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE CHAR (BLOCK (ALT '\'' (~ (SET ['])) '\''))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-10-30 16:29:37:817 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto2_OLC2_2S2023_202101648/interfaces"
    import "Proyecto2_OLC2_2S2023_202101648/Environment"
    import "Proyecto2_OLC2_2S2023_202101648/expressions"
    import "Proyecto2_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT guardstmt { $inst = $guardstmt.gd }) (ALT function {$inst = $function.fun}) (ALT structCreation { $inst = $structCreation.dec }) (ALT callFuncionIns (? (BLOCK (ALT PUNTOCOMA))) {$inst = $callFuncionIns.cf}) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT RETURN expr (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT RETURN (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)}))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVE_IZQ listStructDec LLAVE_DER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID DOSPUNTOS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty,"")
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (= list listStructDec) COMA VAR (= idp ID) DOSPUNTOS (= ids ID) {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID DOSPUNTOS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty,"")
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT VAR (= idp ID) DOSPUNTOS (= ids ID) {
                        var arr []interface{}
                        newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE guardstmt (returns interfaces.Instruction gd) (BLOCK (ALT GUARD expr ELSE LLAVE_IZQ block LLAVE_DER { $gd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID COR_IZQ (= index expr) COR_DER IGUAL (= listan expr) { $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) }) (ALT ID (= op (BLOCK (ALT SUM) (ALT RES))) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE function (returns interfaces.Instruction fun) (BLOCK (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf,environment.NULL, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA types LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA COR_IZQ types COR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.VECTOR, $block.blk)}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID DOSPUNTOS types {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT (= list listParamsFunc) COMA ID DOSPUNTOS COR_IZQ types COR_DER {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID DOSPUNTOS types {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT ID DOSPUNTOS COR_IZQ types COR_DER {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE callFuncionIns (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (BLOCK (ALT MULT) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUM) (ALT RES))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAYIG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MENIG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIFE))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ID PAR_IZQ listStructExp PAR_DER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFuncion {$e = $callFuncion.cf}) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(),$expr.e, $list.p) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFuncion (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) (? (BLOCK (ALT COMA))) ID DOSPUNTOS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOSPUNTOS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-30 16:29:37:843 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto2_OLC2_2S2023_202101648/interfaces"
    import "Proyecto2_OLC2_2S2023_202101648/Environment"
    import "Proyecto2_OLC2_2S2023_202101648/expressions"
    import "Proyecto2_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT guardstmt { $inst = $guardstmt.gd }) (ALT function {$inst = $function.fun}) (ALT structCreation { $inst = $structCreation.dec }) (ALT callFuncionIns (? (BLOCK (ALT PUNTOCOMA))) {$inst = $callFuncionIns.cf}) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT RETURN expr (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT RETURN (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)}))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVE_IZQ listStructDec LLAVE_DER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID DOSPUNTOS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty,"")
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (= list listStructDec) COMA VAR (= idp ID) DOSPUNTOS (= ids ID) {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID DOSPUNTOS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty,"")
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT VAR (= idp ID) DOSPUNTOS (= ids ID) {
                        var arr []interface{}
                        newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE guardstmt (returns interfaces.Instruction gd) (BLOCK (ALT GUARD expr ELSE LLAVE_IZQ block LLAVE_DER { $gd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID COR_IZQ (= index expr) COR_DER IGUAL (= listan expr) { $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE function (returns interfaces.Instruction fun) (BLOCK (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf,environment.NULL, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA types LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA COR_IZQ types COR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.VECTOR, $block.blk)}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID DOSPUNTOS types {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT (= list listParamsFunc) COMA ID DOSPUNTOS COR_IZQ types COR_DER {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID DOSPUNTOS types {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT ID DOSPUNTOS COR_IZQ types COR_DER {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE callFuncionIns (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ID PAR_IZQ listStructExp PAR_DER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFuncion {$e = $callFuncion.cf}) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(),$expr.e, $list.p) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFuncion (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) (? (BLOCK (ALT COMA))) ID DOSPUNTOS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOSPUNTOS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-30 16:29:37:848 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto2_OLC2_2S2023_202101648/interfaces"
    import "Proyecto2_OLC2_2S2023_202101648/Environment"
    import "Proyecto2_OLC2_2S2023_202101648/expressions"
    import "Proyecto2_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT guardstmt { $inst = $guardstmt.gd }) (ALT function {$inst = $function.fun}) (ALT structCreation { $inst = $structCreation.dec }) (ALT callFuncionIns (? (BLOCK (ALT PUNTOCOMA))) {$inst = $callFuncionIns.cf}) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT RETURN expr (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT RETURN (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)}))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVE_IZQ listStructDec LLAVE_DER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID DOSPUNTOS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty,"")
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (= list listStructDec) COMA VAR (= idp ID) DOSPUNTOS (= ids ID) {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID DOSPUNTOS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty,"")
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT VAR (= idp ID) DOSPUNTOS (= ids ID) {
                        var arr []interface{}
                        newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE guardstmt (returns interfaces.Instruction gd) (BLOCK (ALT GUARD expr ELSE LLAVE_IZQ block LLAVE_DER { $gd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID COR_IZQ (= index expr) COR_DER IGUAL (= listan expr) { $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE function (returns interfaces.Instruction fun) (BLOCK (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf,environment.NULL, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA types LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)}) (ALT FUNC ID PAR_IZQ listParamsFunc PAR_DER FLECHA COR_IZQ types COR_DER LLAVE_IZQ block LLAVE_DER {$fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.VECTOR, $block.blk)}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID DOSPUNTOS types {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT (= list listParamsFunc) COMA ID DOSPUNTOS COR_IZQ types COR_DER {
    var arr []interface{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID DOSPUNTOS types {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT ID DOSPUNTOS COR_IZQ types COR_DER {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE callFuncionIns (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ID PAR_IZQ listStructExp PAR_DER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFuncion {$e = $callFuncion.cf}) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(),$expr.e, $list.p) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFuncion (returns interfaces.Expression cf) (BLOCK (ALT ID PAR_IZQ listParamsCall PAR_DER { $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) (? (BLOCK (ALT COMA))) ID DOSPUNTOS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID DOSPUNTOS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-10-30 16:29:37:848 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Proyecto2_OLC2_2S2023_202101648/interfaces"
    import "Proyecto2_OLC2_2S2023_202101648/Environment"
    import "Proyecto2_OLC2_2S2023_202101648/expressions"
    import "Proyecto2_OLC2_2S2023_202101648/instructions"
    import "strings"
}) RULES)
2023-10-30 16:29:37:881 left-recursion LogManager.java:25 listStructDec returns [[]interface{} l]
    :   ( {} VAR<tokenIndex=327> ID<tokenIndex=329> DOSPUNTOS<tokenIndex=331> types<tokenIndex=333> {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty,"")
                        arr = append(arr, newParams)
                        $l = arr
                    } 
        | VAR<tokenIndex=339> idp=ID<tokenIndex=343> DOSPUNTOS<tokenIndex=345> ids=ID<tokenIndex=349> {
                        var arr []interface{}
                        newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                        arr = append(arr, newParams)
                        $l = arr
                    } 
        | { $l = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=291> VAR<tokenIndex=293> ID<tokenIndex=295> DOSPUNTOS<tokenIndex=297> types<tokenIndex=299> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty,"")
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=309> VAR<tokenIndex=311> idp=ID<tokenIndex=315> DOSPUNTOS<tokenIndex=317> ids=ID<tokenIndex=321> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
        )*
    ;
2023-10-30 16:29:37:900 grammar LogManager.java:25 added: (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (VAR (ELEMENT_OPTIONS (= tokenIndex 327))) (ID (ELEMENT_OPTIONS (= tokenIndex 329))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 331))) (types (ELEMENT_OPTIONS (= tokenIndex 333))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty,"")
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT (VAR (ELEMENT_OPTIONS (= tokenIndex 339))) (= idp (ID (ELEMENT_OPTIONS (= tokenIndex 343)))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 345))) (= ids (ID (ELEMENT_OPTIONS (= tokenIndex 349)))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 291))) (VAR (ELEMENT_OPTIONS (= tokenIndex 293))) (ID (ELEMENT_OPTIONS (= tokenIndex 295))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 297))) (types (ELEMENT_OPTIONS (= tokenIndex 299))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty,"")
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 309))) (VAR (ELEMENT_OPTIONS (= tokenIndex 311))) (= idp (ID (ELEMENT_OPTIONS (= tokenIndex 315)))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 317))) (= ids (ID (ELEMENT_OPTIONS (= tokenIndex 321)))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }))))))
2023-10-30 16:29:37:902 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} lpf]
    :   ( {} ID<tokenIndex=831> DOSPUNTOS<tokenIndex=833> types<tokenIndex=835> {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    } 
        | ID<tokenIndex=841> DOSPUNTOS<tokenIndex=843> COR_IZQ<tokenIndex=845> types<tokenIndex=847> COR_DER<tokenIndex=849> {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    } 
        | { $lpf = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=800> ID<tokenIndex=802> DOSPUNTOS<tokenIndex=804> types<tokenIndex=806> {
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=815> ID<tokenIndex=817> DOSPUNTOS<tokenIndex=819> COR_IZQ<tokenIndex=821> types<tokenIndex=823> COR_DER<tokenIndex=825> {
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }
        )*
    ;
2023-10-30 16:29:37:909 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 831))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 833))) (types (ELEMENT_OPTIONS (= tokenIndex 835))) {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 841))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 843))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 845))) (types (ELEMENT_OPTIONS (= tokenIndex 847))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 849))) {
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 800))) (ID (ELEMENT_OPTIONS (= tokenIndex 802))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 804))) (types (ELEMENT_OPTIONS (= tokenIndex 806))) {
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 815))) (ID (ELEMENT_OPTIONS (= tokenIndex 817))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 819))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 821))) (types (ELEMENT_OPTIONS (= tokenIndex 823))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 825))) {
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }))))))
2023-10-30 16:29:37:914 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} RES<tokenIndex=970> left=expr<tokenIndex=974,p=22> { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) } 
        | NOT<tokenIndex=1082> left=expr<tokenIndex=1086,p=16> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)} 
        | ID<tokenIndex=1124> PAR_IZQ<tokenIndex=1126> listStructExp<tokenIndex=1128> PAR_DER<tokenIndex=1130> { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | callFuncion<tokenIndex=1136> {$e = $callFuncion.cf} 
        | PAR_IZQ<tokenIndex=1142> expr<tokenIndex=1144> PAR_DER<tokenIndex=1146> { $e = $expr.e } 
        | conversionstmt<tokenIndex=1152> { $e = $conversionstmt.conv } 
        | ID<tokenIndex=1157> PUNTO<tokenIndex=1159> COUNT<tokenIndex=1161> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)} 
        | ID<tokenIndex=1166> PUNTO<tokenIndex=1168> ISEMPTY<tokenIndex=1170> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)} 
        | list=listArray<tokenIndex=1178> { $e = $list.p} 
        | COR_IZQ<tokenIndex=1184> listParams<tokenIndex=1186> COR_DER<tokenIndex=1188> { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=1194>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1200>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=1206> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=1212> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=1218> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(MULT<tokenIndex=987>|DIV<tokenIndex=989>|MOD<tokenIndex=991>) right=expr<tokenIndex=996,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(SUM<tokenIndex=1009>|RES<tokenIndex=1011>) right=expr<tokenIndex=1016,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MAYIG<tokenIndex=1029>|MAYOR<tokenIndex=1031>) right=expr<tokenIndex=1036,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MENIG<tokenIndex=1049>|MENOR<tokenIndex=1051>) right=expr<tokenIndex=1056,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(IG_IG<tokenIndex=1069>|DIFE<tokenIndex=1071>) right=expr<tokenIndex=1076,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=AND<tokenIndex=1098> right=expr<tokenIndex=1102,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=OR<tokenIndex=1114> right=expr<tokenIndex=1118,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-10-30 16:29:38:019 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (RES (ELEMENT_OPTIONS (= tokenIndex 970))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 974) (= p 22)))) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 1082))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 1086) (= p 16)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1124))) (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 1126))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 1128))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 1130))) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (callFuncion (ELEMENT_OPTIONS (= tokenIndex 1136))) {$e = $callFuncion.cf}) (ALT (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 1142))) (expr (ELEMENT_OPTIONS (= tokenIndex 1144))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 1146))) { $e = $expr.e }) (ALT (conversionstmt (ELEMENT_OPTIONS (= tokenIndex 1152))) { $e = $conversionstmt.conv }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1157))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1159))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 1161))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1166))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1168))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 1170))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 1178)))) { $e = $list.p}) (ALT (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 1184))) (listParams (ELEMENT_OPTIONS (= tokenIndex 1186))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 1188))) { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1194))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1200))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 1206))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 1212))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1218))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (MULT (ELEMENT_OPTIONS (= tokenIndex 987))) (DIV (ELEMENT_OPTIONS (= tokenIndex 989))) (MOD (ELEMENT_OPTIONS (= tokenIndex 991))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 996) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 1009))) (RES (ELEMENT_OPTIONS (= tokenIndex 1011))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1016) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MAYIG (ELEMENT_OPTIONS (= tokenIndex 1029))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1031))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1036) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MENIG (ELEMENT_OPTIONS (= tokenIndex 1049))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1051))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1056) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1069))) (DIFE (ELEMENT_OPTIONS (= tokenIndex 1071))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1076) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1098)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1102) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1114)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1118) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-10-30 16:29:38:020 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1319> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1311> expr<tokenIndex=1313> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-10-30 16:29:38:024 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1319))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1311))) (expr (ELEMENT_OPTIONS (= tokenIndex 1313))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-10-30 16:29:38:025 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1361> { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COR_IZQ<tokenIndex=1338> expr<tokenIndex=1340> COR_DER<tokenIndex=1342> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(),$expr.e, $list.p) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1353> ID<tokenIndex=1355> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
        )*
    ;
2023-10-30 16:29:38:030 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1361))) { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 1338))) (expr (ELEMENT_OPTIONS (= tokenIndex 1340))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 1342))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(),$expr.e, $list.p) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1353))) (ID (ELEMENT_OPTIONS (= tokenIndex 1355))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }))))))
2023-10-30 16:29:38:031 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1405>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1397> expr<tokenIndex=1399> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-10-30 16:29:38:034 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1405))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1397))) (expr (ELEMENT_OPTIONS (= tokenIndex 1399))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-10-30 16:29:38:035 left-recursion LogManager.java:25 listStructExp returns [[]interface{} l]
    :   ( {} ID<tokenIndex=1441> DOSPUNTOS<tokenIndex=1443> expr<tokenIndex=1445>{
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> (COMA<tokenIndex=1427>)? ID<tokenIndex=1431> DOSPUNTOS<tokenIndex=1433> expr<tokenIndex=1435> {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }
        )*
    ;
2023-10-30 16:29:38:043 grammar LogManager.java:25 added: (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1441))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 1443))) (expr (ELEMENT_OPTIONS (= tokenIndex 1445))) {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (? (BLOCK (ALT (COMA (ELEMENT_OPTIONS (= tokenIndex 1427)))))) (ID (ELEMENT_OPTIONS (= tokenIndex 1431))) (DOSPUNTOS (ELEMENT_OPTIONS (= tokenIndex 1433))) (expr (ELEMENT_OPTIONS (= tokenIndex 1435))) {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }))))))
2023-10-30 16:29:38:070 grammar LogManager.java:25 import INT=1
2023-10-30 16:29:38:071 grammar LogManager.java:25 import FLOAT=2
2023-10-30 16:29:38:071 grammar LogManager.java:25 import BOOL=3
2023-10-30 16:29:38:071 grammar LogManager.java:25 import STR=4
2023-10-30 16:29:38:071 grammar LogManager.java:25 import TRU=5
2023-10-30 16:29:38:072 grammar LogManager.java:25 import FAL=6
2023-10-30 16:29:38:072 grammar LogManager.java:25 import PRINT=7
2023-10-30 16:29:38:072 grammar LogManager.java:25 import IF=8
2023-10-30 16:29:38:072 grammar LogManager.java:25 import ELSE=9
2023-10-30 16:29:38:072 grammar LogManager.java:25 import WHILE=10
2023-10-30 16:29:38:072 grammar LogManager.java:25 import FOR=11
2023-10-30 16:29:38:072 grammar LogManager.java:25 import IN=12
2023-10-30 16:29:38:072 grammar LogManager.java:25 import VAR=13
2023-10-30 16:29:38:072 grammar LogManager.java:25 import LET=14
2023-10-30 16:29:38:072 grammar LogManager.java:25 import NIL=15
2023-10-30 16:29:38:072 grammar LogManager.java:25 import BREAK=16
2023-10-30 16:29:38:072 grammar LogManager.java:25 import CONTINUE=17
2023-10-30 16:29:38:072 grammar LogManager.java:25 import APPEND=18
2023-10-30 16:29:38:072 grammar LogManager.java:25 import REMOVELAST=19
2023-10-30 16:29:38:072 grammar LogManager.java:25 import REMOVE=20
2023-10-30 16:29:38:072 grammar LogManager.java:25 import AT=21
2023-10-30 16:29:38:072 grammar LogManager.java:25 import ISEMPTY=22
2023-10-30 16:29:38:072 grammar LogManager.java:25 import COUNT=23
2023-10-30 16:29:38:072 grammar LogManager.java:25 import ARRAY=24
2023-10-30 16:29:38:072 grammar LogManager.java:25 import RETURN=25
2023-10-30 16:29:38:073 grammar LogManager.java:25 import FUNC=26
2023-10-30 16:29:38:073 grammar LogManager.java:25 import STRUCT=27
2023-10-30 16:29:38:073 grammar LogManager.java:25 import GUARD=28
2023-10-30 16:29:38:073 grammar LogManager.java:25 import NUMBER=29
2023-10-30 16:29:38:073 grammar LogManager.java:25 import STRING=30
2023-10-30 16:29:38:073 grammar LogManager.java:25 import CHAR=31
2023-10-30 16:29:38:073 grammar LogManager.java:25 import ID=32
2023-10-30 16:29:38:073 grammar LogManager.java:25 import DIFE=33
2023-10-30 16:29:38:073 grammar LogManager.java:25 import IG_IG=34
2023-10-30 16:29:38:073 grammar LogManager.java:25 import NOT=35
2023-10-30 16:29:38:073 grammar LogManager.java:25 import OR=36
2023-10-30 16:29:38:074 grammar LogManager.java:25 import AND=37
2023-10-30 16:29:38:074 grammar LogManager.java:25 import IGUAL=38
2023-10-30 16:29:38:074 grammar LogManager.java:25 import MAYIG=39
2023-10-30 16:29:38:074 grammar LogManager.java:25 import MENIG=40
2023-10-30 16:29:38:074 grammar LogManager.java:25 import MAYOR=41
2023-10-30 16:29:38:074 grammar LogManager.java:25 import MENOR=42
2023-10-30 16:29:38:074 grammar LogManager.java:25 import MULT=43
2023-10-30 16:29:38:074 grammar LogManager.java:25 import DIV=44
2023-10-30 16:29:38:074 grammar LogManager.java:25 import SUM=45
2023-10-30 16:29:38:074 grammar LogManager.java:25 import RES=46
2023-10-30 16:29:38:076 grammar LogManager.java:25 import MOD=47
2023-10-30 16:29:38:076 grammar LogManager.java:25 import PAR_IZQ=48
2023-10-30 16:29:38:076 grammar LogManager.java:25 import PAR_DER=49
2023-10-30 16:29:38:076 grammar LogManager.java:25 import LLAVE_IZQ=50
2023-10-30 16:29:38:076 grammar LogManager.java:25 import LLAVE_DER=51
2023-10-30 16:29:38:076 grammar LogManager.java:25 import DOSPUNTOS=52
2023-10-30 16:29:38:077 grammar LogManager.java:25 import COR_IZQ=53
2023-10-30 16:29:38:077 grammar LogManager.java:25 import COR_DER=54
2023-10-30 16:29:38:077 grammar LogManager.java:25 import COMA=55
2023-10-30 16:29:38:077 grammar LogManager.java:25 import CIERRAPREGUNTA=56
2023-10-30 16:29:38:077 grammar LogManager.java:25 import PUNTOCOMA=57
2023-10-30 16:29:38:077 grammar LogManager.java:25 import PUNTO=58
2023-10-30 16:29:38:077 grammar LogManager.java:25 import FLECHA=59
2023-10-30 16:29:38:077 grammar LogManager.java:25 import WHITESPACE=60
2023-10-30 16:29:38:077 grammar LogManager.java:25 import COMMENT=61
2023-10-30 16:29:38:078 grammar LogManager.java:25 import LINE_COMMENT=62
2023-10-30 16:29:38:078 grammar LogManager.java:25 import 'Int'=1
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'Float'=2
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'Bool'=3
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'String'=4
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'true'=5
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'false'=6
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'print'=7
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'if'=8
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'else'=9
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'while'=10
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'for'=11
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'in'=12
2023-10-30 16:29:38:079 grammar LogManager.java:25 import 'var'=13
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'let'=14
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'nil'=15
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'break'=16
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'continue'=17
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'append'=18
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'removeLast'=19
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'remove'=20
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'at'=21
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'isEmpty'=22
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'count'=23
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'array'=24
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'return'=25
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'func'=26
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'struct'=27
2023-10-30 16:29:38:080 grammar LogManager.java:25 import 'guard'=28
2023-10-30 16:29:38:080 grammar LogManager.java:25 import '!='=33
2023-10-30 16:29:38:080 grammar LogManager.java:25 import '=='=34
2023-10-30 16:29:38:080 grammar LogManager.java:25 import '!'=35
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '||'=36
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '&&'=37
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '='=38
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '>='=39
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '<='=40
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '>'=41
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '<'=42
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '*'=43
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '/'=44
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '+'=45
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '-'=46
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '%'=47
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '('=48
2023-10-30 16:29:38:081 grammar LogManager.java:25 import ')'=49
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '{'=50
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '}'=51
2023-10-30 16:29:38:081 grammar LogManager.java:25 import ':'=52
2023-10-30 16:29:38:081 grammar LogManager.java:25 import '['=53
2023-10-30 16:29:38:081 grammar LogManager.java:25 import ']'=54
2023-10-30 16:29:38:081 grammar LogManager.java:25 import ','=55
2023-10-30 16:29:38:082 grammar LogManager.java:25 import '?'=56
2023-10-30 16:29:38:082 grammar LogManager.java:25 import ';'=57
2023-10-30 16:29:38:082 grammar LogManager.java:25 import '.'=58
2023-10-30 16:29:38:082 grammar LogManager.java:25 import '->'=59
2023-10-30 16:29:38:082 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, RETURN=25, FUNC=26, STRUCT=27, GUARD=28, NUMBER=29, STRING=30, CHAR=31, ID=32, DIFE=33, IG_IG=34, NOT=35, OR=36, AND=37, IGUAL=38, MAYIG=39, MENIG=40, MAYOR=41, MENOR=42, MULT=43, DIV=44, SUM=45, RES=46, MOD=47, PAR_IZQ=48, PAR_DER=49, LLAVE_IZQ=50, LLAVE_DER=51, DOSPUNTOS=52, COR_IZQ=53, COR_DER=54, COMA=55, CIERRAPREGUNTA=56, PUNTOCOMA=57, PUNTO=58, FLECHA=59, WHITESPACE=60, COMMENT=61, LINE_COMMENT=62, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'isEmpty'=22, 'count'=23, 'array'=24, 'return'=25, 'func'=26, 'struct'=27, 'guard'=28, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '%'=47, '('=48, ')'=49, '{'=50, '}'=51, ':'=52, '['=53, ']'=54, ','=55, '?'=56, ';'=57, '.'=58, '->'=59}
2023-10-30 16:29:38:083 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, RETURN=25, FUNC=26, STRUCT=27, GUARD=28, NUMBER=29, STRING=30, CHAR=31, ID=32, DIFE=33, IG_IG=34, NOT=35, OR=36, AND=37, IGUAL=38, MAYIG=39, MENIG=40, MAYOR=41, MENOR=42, MULT=43, DIV=44, SUM=45, RES=46, MOD=47, PAR_IZQ=48, PAR_DER=49, LLAVE_IZQ=50, LLAVE_DER=51, DOSPUNTOS=52, COR_IZQ=53, COR_DER=54, COMA=55, CIERRAPREGUNTA=56, PUNTOCOMA=57, PUNTO=58, FLECHA=59, WHITESPACE=60, COMMENT=61, LINE_COMMENT=62}
2023-10-30 16:29:38:083 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'isEmpty'=22, 'count'=23, 'array'=24, 'return'=25, 'func'=26, 'struct'=27, 'guard'=28, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '%'=47, '('=48, ')'=49, '{'=50, '}'=51, ':'=52, '['=53, ']'=54, ','=55, '?'=56, ';'=57, '.'=58, '->'=59}
2023-10-30 16:29:38:148 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-10-30 16:29:38:148 LL1 LogManager.java:25 look=[{7..8, 10..11, 13..14, 16..17, 25..28, 32}, {<EOF>, 51}]
2023-10-30 16:29:38:149 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:150 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-10-30 16:29:38:150 LL1 LogManager.java:25 look=[57, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:150 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:150 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-10-30 16:29:38:150 LL1 LogManager.java:25 look=[57, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:150 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:150 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-10-30 16:29:38:150 LL1 LogManager.java:25 look=[57, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:150 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:150 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-10-30 16:29:38:150 LL1 LogManager.java:25 look=[57, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:150 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:152 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-10-30 16:29:38:152 LL1 LogManager.java:25 look=[57, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:153 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:153 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-10-30 16:29:38:153 LL1 LogManager.java:25 look=[57, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:153 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:153 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2023-10-30 16:29:38:153 LL1 LogManager.java:25 look=[57, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:153 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:153 LL1 LogManager.java:25 
DECISION 8 in rule instruction
2023-10-30 16:29:38:154 LL1 LogManager.java:25 look=[57, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:154 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:154 LL1 LogManager.java:25 
DECISION 9 in rule instruction
2023-10-30 16:29:38:154 LL1 LogManager.java:25 look=[57, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:154 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:154 LL1 LogManager.java:25 
DECISION 10 in rule instruction
2023-10-30 16:29:38:154 LL1 LogManager.java:25 look=[57, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:154 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:154 LL1 LogManager.java:25 
DECISION 11 in rule instruction
2023-10-30 16:29:38:155 LL1 LogManager.java:25 look=[57, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:155 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:155 LL1 LogManager.java:25 
DECISION 12 in rule instruction
2023-10-30 16:29:38:155 LL1 LogManager.java:25 look=[7, 8, {13..14}, 32, 10, 11, 28, 26, 27, 32, 16, 17, 32, 32, 32, 25, 25]
2023-10-30 16:29:38:155 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:155 LL1 LogManager.java:25 
DECISION 13 in rule listStructDec
2023-10-30 16:29:38:155 LL1 LogManager.java:25 look=[13, 13, null]
2023-10-30 16:29:38:155 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:155 LL1 LogManager.java:25 
DECISION 14 in rule listStructDec
2023-10-30 16:29:38:155 LL1 LogManager.java:25 look=[null, null]
2023-10-30 16:29:38:155 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:155 LL1 LogManager.java:25 
DECISION 15 in rule listStructDec
2023-10-30 16:29:38:156 LL1 LogManager.java:25 look=[null, 51]
2023-10-30 16:29:38:156 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:156 LL1 LogManager.java:25 
DECISION 16 in rule blockelsif
2023-10-30 16:29:38:156 LL1 LogManager.java:25 look=[8, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25..28, 32, 51}]
2023-10-30 16:29:38:156 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:156 LL1 LogManager.java:25 
DECISION 17 in rule ifstmt
2023-10-30 16:29:38:156 LL1 LogManager.java:25 look=[8, 8, 8]
2023-10-30 16:29:38:156 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:156 LL1 LogManager.java:25 
DECISION 18 in rule declarationstmt
2023-10-30 16:29:38:156 LL1 LogManager.java:25 look=[13, 13, 13, 13, 13, 14, 14]
2023-10-30 16:29:38:156 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:156 LL1 LogManager.java:25 
DECISION 19 in rule asignationstmt
2023-10-30 16:29:38:156 LL1 LogManager.java:25 look=[32, 32, 32]
2023-10-30 16:29:38:157 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:157 LL1 LogManager.java:25 
DECISION 20 in rule function
2023-10-30 16:29:38:157 LL1 LogManager.java:25 look=[26, 26, 26]
2023-10-30 16:29:38:157 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:157 LL1 LogManager.java:25 
DECISION 21 in rule listParamsFunc
2023-10-30 16:29:38:157 LL1 LogManager.java:25 look=[32, 32, null]
2023-10-30 16:29:38:157 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:157 LL1 LogManager.java:25 
DECISION 22 in rule listParamsFunc
2023-10-30 16:29:38:157 LL1 LogManager.java:25 look=[null, null]
2023-10-30 16:29:38:157 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:157 LL1 LogManager.java:25 
DECISION 23 in rule listParamsFunc
2023-10-30 16:29:38:157 LL1 LogManager.java:25 look=[null, 49]
2023-10-30 16:29:38:157 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:157 LL1 LogManager.java:25 
DECISION 24 in rule types
2023-10-30 16:29:38:157 LL1 LogManager.java:25 look=[1, 2, 4, 3]
2023-10-30 16:29:38:157 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:157 LL1 LogManager.java:25 
DECISION 25 in rule typesmatriz
2023-10-30 16:29:38:157 LL1 LogManager.java:25 look=[53, {1..4}]
2023-10-30 16:29:38:157 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:157 LL1 LogManager.java:25 
DECISION 26 in rule exprFor
2023-10-30 16:29:38:158 LL1 LogManager.java:25 look=[{1..2, 4..6, 15, 29..30, 32, 35, 46, 48, 53}, {1..2, 4..6, 15, 29..30, 32, 35, 46, 48, 53}]
2023-10-30 16:29:38:158 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:158 LL1 LogManager.java:25 
DECISION 27 in rule expr
2023-10-30 16:29:38:158 LL1 LogManager.java:25 look=[46, 35, 32, 32, 48, {1..2, 4}, 32, 32, 32, 53, 29, 30, 5, 6, 15]
2023-10-30 16:29:38:158 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:158 LL1 LogManager.java:25 
DECISION 28 in rule expr
2023-10-30 16:29:38:158 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-10-30 16:29:38:158 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:158 LL1 LogManager.java:25 
DECISION 29 in rule expr
2023-10-30 16:29:38:158 LL1 LogManager.java:25 look=[null, null]
2023-10-30 16:29:38:158 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:158 LL1 LogManager.java:25 
DECISION 30 in rule conversionstmt
2023-10-30 16:29:38:158 LL1 LogManager.java:25 look=[1, 2, 4]
2023-10-30 16:29:38:158 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:159 LL1 LogManager.java:25 
DECISION 31 in rule exprvector
2023-10-30 16:29:38:159 LL1 LogManager.java:25 look=[53, 53, 32]
2023-10-30 16:29:38:159 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:159 LL1 LogManager.java:25 
DECISION 32 in rule listParams
2023-10-30 16:29:38:159 LL1 LogManager.java:25 look=[null, {49, 54}]
2023-10-30 16:29:38:159 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:159 LL1 LogManager.java:25 
DECISION 33 in rule listArray
2023-10-30 16:29:38:159 LL1 LogManager.java:25 look=[null, null]
2023-10-30 16:29:38:159 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:159 LL1 LogManager.java:25 
DECISION 34 in rule listArray
2023-10-30 16:29:38:159 LL1 LogManager.java:25 look=[null, null]
2023-10-30 16:29:38:159 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:159 LL1 LogManager.java:25 
DECISION 35 in rule listParamsCall
2023-10-30 16:29:38:159 LL1 LogManager.java:25 look=[{1..2, 4..6, 15, 29..30, 32, 35, 46, 48, 53}, null]
2023-10-30 16:29:38:159 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:159 LL1 LogManager.java:25 
DECISION 36 in rule listParamsCall
2023-10-30 16:29:38:159 LL1 LogManager.java:25 look=[null, 49]
2023-10-30 16:29:38:160 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:160 LL1 LogManager.java:25 
DECISION 37 in rule listStructExp
2023-10-30 16:29:38:160 LL1 LogManager.java:25 look=[32, null]
2023-10-30 16:29:38:160 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:160 LL1 LogManager.java:25 
DECISION 38 in rule listStructExp
2023-10-30 16:29:38:160 LL1 LogManager.java:25 look=[55, 32]
2023-10-30 16:29:38:160 LL1 LogManager.java:25 LL(1)? true
2023-10-30 16:29:38:160 LL1 LogManager.java:25 
DECISION 39 in rule listStructExp
2023-10-30 16:29:38:160 LL1 LogManager.java:25 look=[null, 49]
2023-10-30 16:29:38:160 LL1 LogManager.java:25 LL(1)? false
2023-10-30 16:29:38:166 action-translator LogManager.java:25 translate 
    import "Proyecto2_OLC2_2S2023_202101648/interfaces"
    import "Proyecto2_OLC2_2S2023_202101648/Environment"
    import "Proyecto2_OLC2_2S2023_202101648/expressions"
    import "Proyecto2_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-10-30 16:29:38:183 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-10-30 16:29:38:184 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-10-30 16:29:38:187 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-10-30 16:29:38:189 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-10-30 16:29:38:189 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-10-30 16:29:38:192 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-10-30 16:29:38:193 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-10-30 16:29:38:193 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-10-30 16:29:38:199 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-10-30 16:29:38:199 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:27]
2023-10-30 16:29:38:199 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:35].[@-1,20:23='prnt',<0>,39:45]
2023-10-30 16:29:38:200 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-10-30 16:29:38:200 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-10-30 16:29:38:200 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-10-30 16:29:38:200 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-10-30 16:29:38:201 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:33]
2023-10-30 16:29:38:201 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:41].[@-1,26:28='dec',<0>,41:57]
2023-10-30 16:29:38:201 action-translator LogManager.java:25 translate  $inst = $asignationstmt.asig 
2023-10-30 16:29:38:201 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:32]
2023-10-30 16:29:38:201 action-translator LogManager.java:25 qattr [@-1,10:23='asignationstmt',<0>,42:40].[@-1,25:28='asig',<0>,42:55]
2023-10-30 16:29:38:202 action-translator LogManager.java:25 translate  $inst = $whilestmt.whileinst 
2023-10-30 16:29:38:202 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-10-30 16:29:38:202 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:28='whileinst',<0>,43:32]
2023-10-30 16:29:38:202 action-translator LogManager.java:25 translate  $inst = $forstmt.forinst 
2023-10-30 16:29:38:202 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-10-30 16:29:38:203 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:24='forinst',<0>,44:28]
2023-10-30 16:29:38:203 action-translator LogManager.java:25 translate  $inst = $guardstmt.gd 
2023-10-30 16:29:38:203 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:14]
2023-10-30 16:29:38:203 action-translator LogManager.java:25 qattr [@-1,10:18='guardstmt',<0>,45:22].[@-1,20:21='gd',<0>,45:32]
2023-10-30 16:29:38:204 action-translator LogManager.java:25 translate $inst = $function.fun
2023-10-30 16:29:38:204 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:12]
2023-10-30 16:29:38:204 action-translator LogManager.java:25 qattr [@-1,9:16='function',<0>,46:20].[@-1,18:20='fun',<0>,46:29]
2023-10-30 16:29:38:204 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2023-10-30 16:29:38:204 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:19]
2023-10-30 16:29:38:204 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,47:27].[@-1,25:27='dec',<0>,47:42]
2023-10-30 16:29:38:205 action-translator LogManager.java:25 translate $inst = $callFuncionIns.cf
2023-10-30 16:29:38:205 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,48:31]
2023-10-30 16:29:38:205 action-translator LogManager.java:25 qattr [@-1,9:22='callFuncionIns',<0>,48:39].[@-1,24:25='cf',<0>,48:54]
2023-10-30 16:29:38:205 action-translator LogManager.java:25 translate $inst = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-10-30 16:29:38:206 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,49:22]
2023-10-30 16:29:38:206 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,49:52].[@-1,37:40='line',<0>,49:58]
2023-10-30 16:29:38:206 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,49:65].[@-1,50:52='pos',<0>,49:71]
2023-10-30 16:29:38:207 action-translator LogManager.java:25 translate $inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-10-30 16:29:38:207 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,50:25]
2023-10-30 16:29:38:207 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,50:58].[@-1,43:46='line',<0>,50:67]
2023-10-30 16:29:38:207 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,50:74].[@-1,59:61='pos',<0>,50:83]
2023-10-30 16:29:38:208 action-translator LogManager.java:25 translate $inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)
2023-10-30 16:29:38:208 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,51:53]
2023-10-30 16:29:38:208 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,51:84].[@-1,35:38='line',<0>,51:87]
2023-10-30 16:29:38:208 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,51:94].[@-1,45:47='pos',<0>,51:97]
2023-10-30 16:29:38:209 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,51:103].[@-1,54:57='text',<0>,51:106]
2023-10-30 16:29:38:209 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,51:113].[@-1,66:66='e',<0>,51:118]
2023-10-30 16:29:38:210 action-translator LogManager.java:25 translate $inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)
2023-10-30 16:29:38:210 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,52:52]
2023-10-30 16:29:38:210 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,52:87].[@-1,39:42='line',<0>,52:90]
2023-10-30 16:29:38:210 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,52:97].[@-1,49:51='pos',<0>,52:100]
2023-10-30 16:29:38:210 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,52:106].[@-1,58:61='text',<0>,52:109]
2023-10-30 16:29:38:214 action-translator LogManager.java:25 translate $inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)
2023-10-30 16:29:38:214 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,53:66]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,53:99].[@-1,37:40='line',<0>,53:102]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,53:109].[@-1,47:49='pos',<0>,53:112]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,53:118].[@-1,56:59='text',<0>,53:121]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,63:66='expr',<0>,53:128].[@-1,68:68='e',<0>,53:133]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 translate $inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)
2023-10-30 16:29:38:215 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,54:28]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,54:59].[@-1,39:42='line',<0>,54:66]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,54:73].[@-1,53:55='pos',<0>,54:80]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,54:86].[@-1,64:64='e',<0>,54:91]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 translate $inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)
2023-10-30 16:29:38:215 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,55:23]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,55:54].[@-1,39:42='line',<0>,55:61]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,55:68].[@-1,53:55='pos',<0>,55:75]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2023-10-30 16:29:38:215 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,59:48]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,59:78].[@-1,39:42='line',<0>,59:85]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,59:92].[@-1,53:55='pos',<0>,59:99]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,59:105].[@-1,62:65='text',<0>,59:108]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,59:115].[@-1,83:83='l',<0>,59:129]
2023-10-30 16:29:38:215 action-translator LogManager.java:25 translate 
2023-10-30 16:29:38:282 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty,"")
                        arr = append(arr, newParams)
                        $l = arr
                    
2023-10-30 16:29:38:282 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,4:64].[@-1,116:119='text',<0>,4:67]
2023-10-30 16:29:38:282 action-translator LogManager.java:25 qattr [@-1,123:127='types',<0>,4:74].[@-1,129:130='ty',<0>,4:80]
2023-10-30 16:29:38:283 action-translator LogManager.java:25 attr [@-1,216:216='l',<0>,6:25]
2023-10-30 16:29:38:283 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                        arr = append(arr, newParams)
                        $l = arr
                    
2023-10-30 16:29:38:283 action-translator LogManager.java:25 qattr [@-1,113:115='idp',<0>,10:64].[@-1,117:120='text',<0>,10:68]
2023-10-30 16:29:38:283 action-translator LogManager.java:25 qattr [@-1,148:150='ids',<0>,10:99].[@-1,152:155='text',<0>,10:103]
2023-10-30 16:29:38:284 action-translator LogManager.java:25 attr [@-1,238:238='l',<0>,12:25]
2023-10-30 16:29:38:284 action-translator LogManager.java:25 translate  $l = []interface{}{} 
2023-10-30 16:29:38:284 action-translator LogManager.java:25 attr [@-1,2:2='l',<0>,14:12]
2023-10-30 16:29:38:285 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-10-30 16:29:38:285 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty,"")
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-10-30 16:29:38:285 action-translator LogManager.java:25 qattr [@-1,181:182='ID',<0>,19:98].[@-1,184:187='text',<0>,19:101]
2023-10-30 16:29:38:286 action-translator LogManager.java:25 qattr [@-1,191:195='types',<0>,19:108].[@-1,197:198='ty',<0>,19:114]
2023-10-30 16:29:38:286 action-translator LogManager.java:25 qattr [@-1,277:280='list',<0>,20:72].[@-1,282:282='l',<0>,20:77]
2023-10-30 16:29:38:286 action-translator LogManager.java:25 attr [@-1,356:356='l',<0>,21:59]
2023-10-30 16:29:38:287 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-10-30 16:29:38:287 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($idp.text, environment.DEPENDIENTE,$ids.text)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-10-30 16:29:38:287 action-translator LogManager.java:25 qattr [@-1,181:183='idp',<0>,25:98].[@-1,185:188='text',<0>,25:102]
2023-10-30 16:29:38:287 action-translator LogManager.java:25 qattr [@-1,216:218='ids',<0>,25:133].[@-1,220:223='text',<0>,25:137]
2023-10-30 16:29:38:287 action-translator LogManager.java:25 qattr [@-1,299:302='list',<0>,26:72].[@-1,304:304='l',<0>,26:77]
2023-10-30 16:29:38:288 action-translator LogManager.java:25 attr [@-1,378:378='l',<0>,27:59]
2023-10-30 16:29:38:291 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-10-30 16:29:38:291 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-10-30 16:29:38:292 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)
2023-10-30 16:29:38:293 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,91:37]
2023-10-30 16:29:38:293 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,91:67].[@-1,38:41='line',<0>,91:73]
2023-10-30 16:29:38:293 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,91:79].[@-1,50:52='pos',<0>,91:85]
2023-10-30 16:29:38:294 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,91:90].[@-1,66:66='l',<0>,91:101]
2023-10-30 16:29:38:294 action-translator LogManager.java:25 translate 
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    
2023-10-30 16:29:38:294 action-translator LogManager.java:25 attr [@-1,7:11='blkif',<0>,96:5]
2023-10-30 16:29:38:296 action-translator LogManager.java:25 translate 
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    
2023-10-30 16:29:38:296 action-translator LogManager.java:25 attr [@-1,113:117='blkif',<0>,103:13]
2023-10-30 16:29:38:296 action-translator LogManager.java:25 attr [@-1,129:133='blkif',<0>,103:29]
2023-10-30 16:29:38:298 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-10-30 16:29:38:298 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,109:38]
2023-10-30 16:29:38:298 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,109:67].[@-1,34:37='line',<0>,109:70]
2023-10-30 16:29:38:299 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,109:77].[@-1,44:46='pos',<0>,109:80]
2023-10-30 16:29:38:299 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,109:86].[@-1,55:55='e',<0>,109:91]
2023-10-30 16:29:38:300 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,109:95].[@-1,65:67='blk',<0>,109:101]
2023-10-30 16:29:38:301 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)
2023-10-30 16:29:38:301 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,110:84]
2023-10-30 16:29:38:301 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,110:113].[@-1,33:36='line',<0>,110:116]
2023-10-30 16:29:38:301 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,110:123].[@-1,43:45='pos',<0>,110:126]
2023-10-30 16:29:38:301 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,110:132].[@-1,54:54='e',<0>,110:137]
2023-10-30 16:29:38:302 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,110:141].[@-1,65:67='blk',<0>,110:148]
2023-10-30 16:29:38:302 action-translator LogManager.java:25 qattr [@-1,71:78='elseblck',<0>,110:154].[@-1,80:82='blk',<0>,110:163]
2023-10-30 16:29:38:307 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)
2023-10-30 16:29:38:308 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,111:60]
2023-10-30 16:29:38:308 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,111:89].[@-1,33:36='line',<0>,111:92]
2023-10-30 16:29:38:308 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,111:99].[@-1,43:45='pos',<0>,111:102]
2023-10-30 16:29:38:308 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,111:108].[@-1,54:54='e',<0>,111:113]
2023-10-30 16:29:38:308 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,111:117].[@-1,65:67='blk',<0>,111:124]
2023-10-30 16:29:38:308 action-translator LogManager.java:25 qattr [@-1,71:80='blockelsif',<0>,111:130].[@-1,82:86='blkif',<0>,111:141]
2023-10-30 16:29:38:317 action-translator LogManager.java:25 translate  $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-10-30 16:29:38:317 action-translator LogManager.java:25 attr [@-1,2:10='whileinst',<0>,115:41]
2023-10-30 16:29:38:318 action-translator LogManager.java:25 qattr [@-1,37:41='WHILE',<0>,115:76].[@-1,43:46='line',<0>,115:82]
2023-10-30 16:29:38:318 action-translator LogManager.java:25 qattr [@-1,50:54='WHILE',<0>,115:89].[@-1,56:58='pos',<0>,115:95]
2023-10-30 16:29:38:318 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,115:101].[@-1,67:67='e',<0>,115:106]
2023-10-30 16:29:38:318 action-translator LogManager.java:25 qattr [@-1,71:75='block',<0>,115:110].[@-1,77:79='blk',<0>,115:116]
2023-10-30 16:29:38:319 action-translator LogManager.java:25 translate  $gd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) 
2023-10-30 16:29:38:319 action-translator LogManager.java:25 attr [@-1,2:3='gd',<0>,119:46]
2023-10-30 16:29:38:320 action-translator LogManager.java:25 qattr [@-1,30:34='GUARD',<0>,119:74].[@-1,36:39='line',<0>,119:80]
2023-10-30 16:29:38:320 action-translator LogManager.java:25 qattr [@-1,43:47='GUARD',<0>,119:87].[@-1,49:51='pos',<0>,119:93]
2023-10-30 16:29:38:320 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,119:99].[@-1,60:60='e',<0>,119:104]
2023-10-30 16:29:38:321 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,119:108].[@-1,70:72='blk',<0>,119:114]
2023-10-30 16:29:38:321 action-translator LogManager.java:25 translate $forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)
2023-10-30 16:29:38:321 action-translator LogManager.java:25 attr [@-1,1:7='forinst',<0>,123:47]
2023-10-30 16:29:38:321 action-translator LogManager.java:25 qattr [@-1,32:34='FOR',<0>,123:78].[@-1,36:39='line',<0>,123:82]
2023-10-30 16:29:38:322 action-translator LogManager.java:25 qattr [@-1,43:45='FOR',<0>,123:89].[@-1,47:49='pos',<0>,123:93]
2023-10-30 16:29:38:322 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,123:99].[@-1,56:59='text',<0>,123:102]
2023-10-30 16:29:38:322 action-translator LogManager.java:25 qattr [@-1,63:69='exprFor',<0>,123:109].[@-1,71:71='e',<0>,123:117]
2023-10-30 16:29:38:322 action-translator LogManager.java:25 qattr [@-1,75:79='block',<0>,123:121].[@-1,81:83='blk',<0>,123:127]
2023-10-30 16:29:38:324 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) 
2023-10-30 16:29:38:324 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,127:39]
2023-10-30 16:29:38:324 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,127:74].[@-1,41:44='line',<0>,127:78]
2023-10-30 16:29:38:325 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,127:85].[@-1,52:54='pos',<0>,127:89]
2023-10-30 16:29:38:326 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,127:95].[@-1,61:64='text',<0>,127:98]
2023-10-30 16:29:38:326 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,127:110].[@-1,79:80='ty',<0>,127:116]
2023-10-30 16:29:38:326 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,127:121].[@-1,89:89='e',<0>,127:126]
2023-10-30 16:29:38:326 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) 
2023-10-30 16:29:38:327 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,128:22]
2023-10-30 16:29:38:327 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,128:57].[@-1,41:44='line',<0>,128:61]
2023-10-30 16:29:38:328 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,128:68].[@-1,52:54='pos',<0>,128:72]
2023-10-30 16:29:38:328 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,128:78].[@-1,61:64='text',<0>,128:81]
2023-10-30 16:29:38:328 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,128:117].[@-1,102:102='e',<0>,128:122]
2023-10-30 16:29:38:329 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) 
2023-10-30 16:29:38:329 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,129:42]
2023-10-30 16:29:38:329 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,129:77].[@-1,41:44='line',<0>,129:81]
2023-10-30 16:29:38:330 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,129:88].[@-1,52:54='pos',<0>,129:92]
2023-10-30 16:29:38:330 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,129:98].[@-1,61:64='text',<0>,129:101]
2023-10-30 16:29:38:330 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,129:113].[@-1,79:80='ty',<0>,129:119]
2023-10-30 16:29:38:330 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) 
2023-10-30 16:29:38:330 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,130:60]
2023-10-30 16:29:38:331 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,130:101].[@-1,47:50='line',<0>,130:105]
2023-10-30 16:29:38:331 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,130:112].[@-1,58:60='pos',<0>,130:116]
2023-10-30 16:29:38:331 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,130:122].[@-1,67:70='text',<0>,130:125]
2023-10-30 16:29:38:331 action-translator LogManager.java:25 qattr [@-1,79:83='types',<0>,130:137].[@-1,85:86='ty',<0>,130:143]
2023-10-30 16:29:38:331 action-translator LogManager.java:25 qattr [@-1,90:99='exprvector',<0>,130:148].[@-1,101:105='exprv',<0>,130:159]
2023-10-30 16:29:38:331 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) 
2023-10-30 16:29:38:332 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,131:44]
2023-10-30 16:29:38:332 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,131:85].[@-1,47:50='line',<0>,131:89]
2023-10-30 16:29:38:332 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,131:96].[@-1,58:60='pos',<0>,131:100]
2023-10-30 16:29:38:332 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,131:106].[@-1,67:70='text',<0>,131:109]
2023-10-30 16:29:38:332 action-translator LogManager.java:25 qattr [@-1,79:89='typesmatriz',<0>,131:121].[@-1,91:92='tm',<0>,131:133]
2023-10-30 16:29:38:333 action-translator LogManager.java:25 qattr [@-1,96:99='expr',<0>,131:138].[@-1,101:101='e',<0>,131:143]
2023-10-30 16:29:38:333 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) 
2023-10-30 16:29:38:334 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,132:38]
2023-10-30 16:29:38:334 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,132:73].[@-1,41:44='line',<0>,132:77]
2023-10-30 16:29:38:334 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,132:84].[@-1,52:54='pos',<0>,132:88]
2023-10-30 16:29:38:334 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,132:94].[@-1,61:64='text',<0>,132:97]
2023-10-30 16:29:38:334 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,132:110].[@-1,80:81='ty',<0>,132:116]
2023-10-30 16:29:38:334 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,132:121].[@-1,90:90='e',<0>,132:126]
2023-10-30 16:29:38:335 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) 
2023-10-30 16:29:38:335 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,133:22]
2023-10-30 16:29:38:335 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,133:57].[@-1,41:44='line',<0>,133:61]
2023-10-30 16:29:38:336 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,133:68].[@-1,52:54='pos',<0>,133:72]
2023-10-30 16:29:38:337 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,133:78].[@-1,61:64='text',<0>,133:81]
2023-10-30 16:29:38:337 action-translator LogManager.java:25 qattr [@-1,98:101='expr',<0>,133:118].[@-1,103:103='e',<0>,133:123]
2023-10-30 16:29:38:338 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-10-30 16:29:38:338 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,137:18]
2023-10-30 16:29:38:338 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,137:53].[@-1,40:43='line',<0>,137:56]
2023-10-30 16:29:38:338 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,137:63].[@-1,50:52='pos',<0>,137:66]
2023-10-30 16:29:38:338 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,137:72].[@-1,59:62='text',<0>,137:75]
2023-10-30 16:29:38:339 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,137:82].[@-1,71:71='e',<0>,137:87]
2023-10-30 16:29:38:340 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) 
2023-10-30 16:29:38:340 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,138:52]
2023-10-30 16:29:38:340 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,138:98].[@-1,51:54='line',<0>,138:101]
2023-10-30 16:29:38:340 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,138:108].[@-1,61:63='pos',<0>,138:111]
2023-10-30 16:29:38:340 action-translator LogManager.java:25 qattr [@-1,67:68='ID',<0>,138:117].[@-1,70:73='text',<0>,138:120]
2023-10-30 16:29:38:340 action-translator LogManager.java:25 qattr [@-1,77:81='index',<0>,138:127].[@-1,83:83='e',<0>,138:133]
2023-10-30 16:29:38:341 action-translator LogManager.java:25 qattr [@-1,87:92='listan',<0>,138:137].[@-1,94:94='e',<0>,138:144]
2023-10-30 16:29:38:341 action-translator LogManager.java:25 translate $asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)
2023-10-30 16:29:38:341 action-translator LogManager.java:25 attr [@-1,1:4='asig',<0>,139:30]
2023-10-30 16:29:38:341 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,139:74].[@-1,48:51='line',<0>,139:77]
2023-10-30 16:29:38:342 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,139:84].[@-1,58:60='pos',<0>,139:87]
2023-10-30 16:29:38:342 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,139:93].[@-1,67:70='text',<0>,139:96]
2023-10-30 16:29:38:342 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,139:103].[@-1,79:79='e',<0>,139:108]
2023-10-30 16:29:38:342 action-translator LogManager.java:25 qattr [@-1,83:84='op',<0>,139:112].[@-1,86:89='text',<0>,139:115]
2023-10-30 16:29:38:343 action-translator LogManager.java:25 translate $fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf,environment.NULL, $block.blk)
2023-10-30 16:29:38:343 action-translator LogManager.java:25 attr [@-1,1:3='fun',<0>,144:68]
2023-10-30 16:29:38:343 action-translator LogManager.java:25 qattr [@-1,32:35='FUNC',<0>,144:99].[@-1,37:40='line',<0>,144:104]
2023-10-30 16:29:38:344 action-translator LogManager.java:25 qattr [@-1,44:47='FUNC',<0>,144:111].[@-1,49:51='pos',<0>,144:116]
2023-10-30 16:29:38:344 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,144:122].[@-1,58:61='text',<0>,144:125]
2023-10-30 16:29:38:344 action-translator LogManager.java:25 qattr [@-1,65:78='listParamsFunc',<0>,144:132].[@-1,80:82='lpf',<0>,144:147]
2023-10-30 16:29:38:344 action-translator LogManager.java:25 qattr [@-1,103:107='block',<0>,144:170].[@-1,109:111='blk',<0>,144:176]
2023-10-30 16:29:38:346 action-translator LogManager.java:25 translate $fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
2023-10-30 16:29:38:346 action-translator LogManager.java:25 attr [@-1,1:3='fun',<0>,145:81]
2023-10-30 16:29:38:346 action-translator LogManager.java:25 qattr [@-1,32:35='FUNC',<0>,145:112].[@-1,37:40='line',<0>,145:117]
2023-10-30 16:29:38:346 action-translator LogManager.java:25 qattr [@-1,44:47='FUNC',<0>,145:124].[@-1,49:51='pos',<0>,145:129]
2023-10-30 16:29:38:347 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,145:135].[@-1,58:61='text',<0>,145:138]
2023-10-30 16:29:38:347 action-translator LogManager.java:25 qattr [@-1,65:78='listParamsFunc',<0>,145:145].[@-1,80:82='lpf',<0>,145:160]
2023-10-30 16:29:38:347 action-translator LogManager.java:25 qattr [@-1,86:90='types',<0>,145:166].[@-1,92:93='ty',<0>,145:172]
2023-10-30 16:29:38:347 action-translator LogManager.java:25 qattr [@-1,97:101='block',<0>,145:177].[@-1,103:105='blk',<0>,145:183]
2023-10-30 16:29:38:347 action-translator LogManager.java:25 translate $fun = instructions.NewFuncion($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.VECTOR, $block.blk)
2023-10-30 16:29:38:348 action-translator LogManager.java:25 attr [@-1,1:3='fun',<0>,146:97]
2023-10-30 16:29:38:348 action-translator LogManager.java:25 qattr [@-1,32:35='FUNC',<0>,146:128].[@-1,37:40='line',<0>,146:133]
2023-10-30 16:29:38:348 action-translator LogManager.java:25 qattr [@-1,44:47='FUNC',<0>,146:140].[@-1,49:51='pos',<0>,146:145]
2023-10-30 16:29:38:348 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,146:151].[@-1,58:61='text',<0>,146:154]
2023-10-30 16:29:38:348 action-translator LogManager.java:25 qattr [@-1,65:78='listParamsFunc',<0>,146:161].[@-1,80:82='lpf',<0>,146:176]
2023-10-30 16:29:38:348 action-translator LogManager.java:25 qattr [@-1,106:110='block',<0>,146:202].[@-1,112:114='blk',<0>,146:208]
2023-10-30 16:29:38:350 action-translator LogManager.java:25 translate 
2023-10-30 16:29:38:350 action-translator LogManager.java:25 translate 
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    
2023-10-30 16:29:38:350 action-translator LogManager.java:25 attr [@-1,7:9='lpf',<0>,3:5]
2023-10-30 16:29:38:350 action-translator LogManager.java:25 qattr [@-1,85:86='ID',<0>,4:55].[@-1,88:91='line',<0>,4:58]
2023-10-30 16:29:38:350 action-translator LogManager.java:25 qattr [@-1,95:96='ID',<0>,4:65].[@-1,98:100='pos',<0>,4:68]
2023-10-30 16:29:38:350 action-translator LogManager.java:25 qattr [@-1,104:105='ID',<0>,4:74].[@-1,107:110='text',<0>,4:77]
2023-10-30 16:29:38:350 action-translator LogManager.java:25 qattr [@-1,114:118='types',<0>,4:84].[@-1,120:121='ty',<0>,4:90]
2023-10-30 16:29:38:351 action-translator LogManager.java:25 attr [@-1,130:132='lpf',<0>,5:5]
2023-10-30 16:29:38:351 action-translator LogManager.java:25 attr [@-1,144:146='lpf',<0>,5:19]
2023-10-30 16:29:38:351 action-translator LogManager.java:25 translate 
    $lpf = []interface{}{}
    newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
    $lpf = append($lpf, newParam)
    
2023-10-30 16:29:38:351 action-translator LogManager.java:25 attr [@-1,7:9='lpf',<0>,8:5]
2023-10-30 16:29:38:351 action-translator LogManager.java:25 qattr [@-1,85:86='ID',<0>,9:55].[@-1,88:91='line',<0>,9:58]
2023-10-30 16:29:38:351 action-translator LogManager.java:25 qattr [@-1,95:96='ID',<0>,9:65].[@-1,98:100='pos',<0>,9:68]
2023-10-30 16:29:38:352 action-translator LogManager.java:25 qattr [@-1,104:105='ID',<0>,9:74].[@-1,107:110='text',<0>,9:77]
2023-10-30 16:29:38:352 action-translator LogManager.java:25 attr [@-1,139:141='lpf',<0>,10:5]
2023-10-30 16:29:38:352 action-translator LogManager.java:25 attr [@-1,153:155='lpf',<0>,10:19]
2023-10-30 16:29:38:352 action-translator LogManager.java:25 translate  $lpf = []interface{}{} 
2023-10-30 16:29:38:352 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,12:12]
2023-10-30 16:29:38:352 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-10-30 16:29:38:353 action-translator LogManager.java:25 translate 
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              
2023-10-30 16:29:38:353 action-translator LogManager.java:25 qattr [@-1,104:105='ID',<0>,17:65].[@-1,107:110='line',<0>,17:68]
2023-10-30 16:29:38:353 action-translator LogManager.java:25 qattr [@-1,114:115='ID',<0>,17:75].[@-1,117:119='pos',<0>,17:78]
2023-10-30 16:29:38:353 action-translator LogManager.java:25 qattr [@-1,123:124='ID',<0>,17:84].[@-1,126:129='text',<0>,17:87]
2023-10-30 16:29:38:353 action-translator LogManager.java:25 qattr [@-1,133:137='types',<0>,17:94].[@-1,139:140='ty',<0>,17:100]
2023-10-30 16:29:38:353 action-translator LogManager.java:25 qattr [@-1,172:175='list',<0>,18:28].[@-1,177:179='lpf',<0>,18:33]
2023-10-30 16:29:38:354 action-translator LogManager.java:25 attr [@-1,208:210='lpf',<0>,19:15]
2023-10-30 16:29:38:354 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-10-30 16:29:38:354 action-translator LogManager.java:25 translate 
              var arr []interface{}
              newParam := instructions.NewDeclaracionParametros($ID.line, $ID.pos, $ID.text, environment.VECTOR)
              arr = append($list.lpf, newParam)
              $lpf = arr
              
2023-10-30 16:29:38:354 action-translator LogManager.java:25 qattr [@-1,104:105='ID',<0>,23:65].[@-1,107:110='line',<0>,23:68]
2023-10-30 16:29:38:355 action-translator LogManager.java:25 qattr [@-1,114:115='ID',<0>,23:75].[@-1,117:119='pos',<0>,23:78]
2023-10-30 16:29:38:355 action-translator LogManager.java:25 qattr [@-1,123:124='ID',<0>,23:84].[@-1,126:129='text',<0>,23:87]
2023-10-30 16:29:38:355 action-translator LogManager.java:25 qattr [@-1,181:184='list',<0>,24:28].[@-1,186:188='lpf',<0>,24:33]
2023-10-30 16:29:38:355 action-translator LogManager.java:25 attr [@-1,217:219='lpf',<0>,25:15]
2023-10-30 16:29:38:355 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-10-30 16:29:38:355 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-10-30 16:29:38:356 action-translator LogManager.java:25 translate  $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-10-30 16:29:38:356 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,176:38]
2023-10-30 16:29:38:356 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,176:74].[@-1,41:44='line',<0>,176:77]
2023-10-30 16:29:38:356 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,176:84].[@-1,51:53='pos',<0>,176:87]
2023-10-30 16:29:38:356 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,176:93].[@-1,60:63='text',<0>,176:96]
2023-10-30 16:29:38:356 action-translator LogManager.java:25 qattr [@-1,67:80='listParamsCall',<0>,176:103].[@-1,82:82='l',<0>,176:118]
2023-10-30 16:29:38:357 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-10-30 16:29:38:357 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,180:8]
2023-10-30 16:29:38:357 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-10-30 16:29:38:357 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,181:10]
2023-10-30 16:29:38:357 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-10-30 16:29:38:358 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,182:8]
2023-10-30 16:29:38:358 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-10-30 16:29:38:359 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,183:9]
2023-10-30 16:29:38:359 action-translator LogManager.java:25 translate 
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            
2023-10-30 16:29:38:359 action-translator LogManager.java:25 qattr [@-1,191:194='list',<0>,190:46].[@-1,196:197='tm',<0>,190:51]
2023-10-30 16:29:38:360 action-translator LogManager.java:25 attr [@-1,243:244='tm',<0>,191:33]
2023-10-30 16:29:38:360 action-translator LogManager.java:25 translate 
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        
2023-10-30 16:29:38:361 action-translator LogManager.java:25 attr [@-1,15:16='tm',<0>,194:13]
2023-10-30 16:29:38:361 action-translator LogManager.java:25 qattr [@-1,86:90='types',<0>,195:49].[@-1,92:93='ty',<0>,195:55]
2023-10-30 16:29:38:361 action-translator LogManager.java:25 attr [@-1,110:111='tm',<0>,196:13]
2023-10-30 16:29:38:362 action-translator LogManager.java:25 attr [@-1,123:124='tm',<0>,196:26]
2023-10-30 16:29:38:363 action-translator LogManager.java:25 translate $e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)
2023-10-30 16:29:38:363 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,201:44]
2023-10-30 16:29:38:363 action-translator LogManager.java:25 qattr [@-1,30:35='range1',<0>,201:73].[@-1,37:41='start',<0>,201:80]
2023-10-30 16:29:38:364 action-translator LogManager.java:25 qattr [@-1,55:60='range1',<0>,201:98].[@-1,62:66='start',<0>,201:105]
2023-10-30 16:29:38:364 action-translator LogManager.java:25 qattr [@-1,82:87='range1',<0>,201:125].[@-1,89:89='e',<0>,201:132]
2023-10-30 16:29:38:364 action-translator LogManager.java:25 qattr [@-1,93:98='range2',<0>,201:136].[@-1,100:100='e',<0>,201:143]
2023-10-30 16:29:38:364 action-translator LogManager.java:25 translate $e = $expr.e
2023-10-30 16:29:38:364 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,202:7]
2023-10-30 16:29:38:365 action-translator LogManager.java:25 qattr [@-1,6:9='expr',<0>,202:12].[@-1,11:11='e',<0>,202:17]
2023-10-30 16:29:38:368 action-translator LogManager.java:25 translate 
2023-10-30 16:29:38:368 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) 
2023-10-30 16:29:38:369 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:66]
2023-10-30 16:29:38:369 action-translator LogManager.java:25 qattr [@-1,32:34='RES',<0>,2:96].[@-1,36:39='line',<0>,2:100]
2023-10-30 16:29:38:369 action-translator LogManager.java:25 qattr [@-1,43:45='RES',<0>,2:107].[@-1,47:49='pos',<0>,2:111]
2023-10-30 16:29:38:369 action-translator LogManager.java:25 qattr [@-1,53:56='left',<0>,2:117].[@-1,58:58='e',<0>,2:122]
2023-10-30 16:29:38:369 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)
2023-10-30 16:29:38:369 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:64]
2023-10-30 16:29:38:369 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:94].[@-1,35:38='line',<0>,3:98]
2023-10-30 16:29:38:370 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:105].[@-1,46:48='pos',<0>,3:109]
2023-10-30 16:29:38:370 action-translator LogManager.java:25 qattr [@-1,52:55='left',<0>,3:115].[@-1,57:57='e',<0>,3:120]
2023-10-30 16:29:38:370 action-translator LogManager.java:25 qattr [@-1,61:63='NOT',<0>,3:124].[@-1,65:68='text',<0>,3:128]
2023-10-30 16:29:38:371 action-translator LogManager.java:25 translate  $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2023-10-30 16:29:38:371 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:113]
2023-10-30 16:29:38:371 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,4:143].[@-1,35:38='line',<0>,4:146]
2023-10-30 16:29:38:371 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,4:153].[@-1,45:47='pos',<0>,4:156]
2023-10-30 16:29:38:371 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,4:162].[@-1,54:57='text',<0>,4:165]
2023-10-30 16:29:38:371 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,4:172].[@-1,75:75='l',<0>,4:186]
2023-10-30 16:29:38:372 action-translator LogManager.java:25 translate $e = $callFuncion.cf
2023-10-30 16:29:38:381 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,5:40]
2023-10-30 16:29:38:400 action-translator LogManager.java:25 qattr [@-1,6:16='callFuncion',<0>,5:45].[@-1,18:19='cf',<0>,5:57]
2023-10-30 16:29:38:400 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-10-30 16:29:38:400 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:84]
2023-10-30 16:29:38:401 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,6:89].[@-1,12:12='e',<0>,6:94]
2023-10-30 16:29:38:401 action-translator LogManager.java:25 translate  $e = $conversionstmt.conv 
2023-10-30 16:29:38:401 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:44]
2023-10-30 16:29:38:402 action-translator LogManager.java:25 qattr [@-1,7:20='conversionstmt',<0>,7:49].[@-1,22:25='conv',<0>,7:64]
2023-10-30 16:29:38:402 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)
2023-10-30 16:29:38:402 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:78]
2023-10-30 16:29:38:403 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,8:104].[@-1,31:34='line',<0>,8:107]
2023-10-30 16:29:38:403 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,8:114].[@-1,41:43='pos',<0>,8:117]
2023-10-30 16:29:38:404 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,8:123].[@-1,50:53='text',<0>,8:126]
2023-10-30 16:29:38:404 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)
2023-10-30 16:29:38:404 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,9:80]
2023-10-30 16:29:38:404 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,9:108].[@-1,33:36='line',<0>,9:111]
2023-10-30 16:29:38:404 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,9:118].[@-1,43:45='pos',<0>,9:121]
2023-10-30 16:29:38:404 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,9:127].[@-1,52:55='text',<0>,9:130]
2023-10-30 16:29:38:405 action-translator LogManager.java:25 translate  $e = $list.p
2023-10-30 16:29:38:405 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,10:44]
2023-10-30 16:29:38:405 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,10:49].[@-1,12:12='p',<0>,10:54]
2023-10-30 16:29:38:406 action-translator LogManager.java:25 translate  $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-10-30 16:29:38:406 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,11:90]
2023-10-30 16:29:38:406 action-translator LogManager.java:25 qattr [@-1,28:34='COR_IZQ',<0>,11:116].[@-1,36:39='line',<0>,11:124]
2023-10-30 16:29:38:406 action-translator LogManager.java:25 qattr [@-1,43:49='COR_IZQ',<0>,11:131].[@-1,51:53='pos',<0>,11:139]
2023-10-30 16:29:38:406 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,11:145].[@-1,68:68='l',<0>,11:156]
2023-10-30 16:29:38:407 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-10-30 16:29:38:407 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,14:30].[@-1,39:42='text',<0>,14:37]
2023-10-30 16:29:38:407 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,15:43].[@-1,102:105='text',<0>,15:50]
2023-10-30 16:29:38:408 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,19:13]
2023-10-30 16:29:38:408 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,19:43].[@-1,240:243='line',<0>,19:50]
2023-10-30 16:29:38:408 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,19:56].[@-1,253:255='pos',<0>,19:63]
2023-10-30 16:29:38:409 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,21:37].[@-1,341:344='text',<0>,21:44]
2023-10-30 16:29:38:409 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,25:13]
2023-10-30 16:29:38:409 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,25:43].[@-1,474:477='line',<0>,25:50]
2023-10-30 16:29:38:409 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,25:56].[@-1,487:489='pos',<0>,25:63]
2023-10-30 16:29:38:409 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-10-30 16:29:38:410 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,30:16].[@-1,25:28='text',<0>,30:23]
2023-10-30 16:29:38:410 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,31:9]
2023-10-30 16:29:38:410 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,31:39].[@-1,77:80='line',<0>,31:46]
2023-10-30 16:29:38:410 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,31:53].[@-1,91:93='pos',<0>,31:60]
2023-10-30 16:29:38:410 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-10-30 16:29:38:411 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:33]
2023-10-30 16:29:38:411 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,33:63].[@-1,36:39='line',<0>,33:67]
2023-10-30 16:29:38:411 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,33:74].[@-1,47:49='pos',<0>,33:78]
2023-10-30 16:29:38:412 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-10-30 16:29:38:412 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:33]
2023-10-30 16:29:38:412 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,34:63].[@-1,36:39='line',<0>,34:67]
2023-10-30 16:29:38:412 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,34:74].[@-1,47:49='pos',<0>,34:78]
2023-10-30 16:29:38:413 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-10-30 16:29:38:413 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:33]
2023-10-30 16:29:38:413 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,35:63].[@-1,36:39='line',<0>,35:67]
2023-10-30 16:29:38:413 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,35:74].[@-1,47:49='pos',<0>,35:78]
2023-10-30 16:29:38:413 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-10-30 16:29:38:414 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-30 16:29:38:415 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:160]
2023-10-30 16:29:38:415 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:190].[@-1,37:41='start',<0>,38:195]
2023-10-30 16:29:38:416 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:213].[@-1,60:64='start',<0>,38:218]
2023-10-30 16:29:38:416 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:238].[@-1,85:85='e',<0>,38:243]
2023-10-30 16:29:38:416 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:247].[@-1,92:95='text',<0>,38:250]
2023-10-30 16:29:38:416 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:257].[@-1,105:105='e',<0>,38:263]
2023-10-30 16:29:38:417 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-30 16:29:38:417 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-30 16:29:38:417 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:152]
2023-10-30 16:29:38:418 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:182].[@-1,37:41='start',<0>,39:187]
2023-10-30 16:29:38:418 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:205].[@-1,60:64='start',<0>,39:210]
2023-10-30 16:29:38:418 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:230].[@-1,85:85='e',<0>,39:235]
2023-10-30 16:29:38:418 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:239].[@-1,92:95='text',<0>,39:242]
2023-10-30 16:29:38:418 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:249].[@-1,105:105='e',<0>,39:255]
2023-10-30 16:29:38:419 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-30 16:29:38:419 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-30 16:29:38:419 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:156]
2023-10-30 16:29:38:419 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:186].[@-1,37:41='start',<0>,40:191]
2023-10-30 16:29:38:419 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:209].[@-1,60:64='start',<0>,40:214]
2023-10-30 16:29:38:420 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:234].[@-1,85:85='e',<0>,40:239]
2023-10-30 16:29:38:420 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:243].[@-1,92:95='text',<0>,40:246]
2023-10-30 16:29:38:420 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:253].[@-1,105:105='e',<0>,40:259]
2023-10-30 16:29:38:420 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-30 16:29:38:421 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-30 16:29:38:421 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:156]
2023-10-30 16:29:38:421 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:186].[@-1,37:41='start',<0>,41:191]
2023-10-30 16:29:38:421 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:209].[@-1,60:64='start',<0>,41:214]
2023-10-30 16:29:38:421 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:234].[@-1,85:85='e',<0>,41:239]
2023-10-30 16:29:38:422 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:243].[@-1,92:95='text',<0>,41:246]
2023-10-30 16:29:38:422 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:253].[@-1,105:105='e',<0>,41:259]
2023-10-30 16:29:38:422 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-30 16:29:38:422 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-30 16:29:38:423 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:155]
2023-10-30 16:29:38:423 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:185].[@-1,37:41='start',<0>,42:190]
2023-10-30 16:29:38:423 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:208].[@-1,60:64='start',<0>,42:213]
2023-10-30 16:29:38:423 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:233].[@-1,85:85='e',<0>,42:238]
2023-10-30 16:29:38:423 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:242].[@-1,92:95='text',<0>,42:245]
2023-10-30 16:29:38:423 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:252].[@-1,105:105='e',<0>,42:258]
2023-10-30 16:29:38:423 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-30 16:29:38:424 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-30 16:29:38:424 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:129]
2023-10-30 16:29:38:424 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:159].[@-1,37:41='start',<0>,43:164]
2023-10-30 16:29:38:424 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:182].[@-1,60:64='start',<0>,43:187]
2023-10-30 16:29:38:424 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:207].[@-1,85:85='e',<0>,43:212]
2023-10-30 16:29:38:424 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:216].[@-1,92:95='text',<0>,43:219]
2023-10-30 16:29:38:425 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:226].[@-1,105:105='e',<0>,43:232]
2023-10-30 16:29:38:425 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-30 16:29:38:425 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-30 16:29:38:425 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:128]
2023-10-30 16:29:38:425 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:158].[@-1,37:41='start',<0>,44:163]
2023-10-30 16:29:38:426 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:181].[@-1,60:64='start',<0>,44:186]
2023-10-30 16:29:38:426 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:206].[@-1,85:85='e',<0>,44:211]
2023-10-30 16:29:38:426 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:215].[@-1,92:95='text',<0>,44:218]
2023-10-30 16:29:38:427 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:225].[@-1,105:105='e',<0>,44:231]
2023-10-30 16:29:38:427 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-10-30 16:29:38:427 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-30 16:29:38:427 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-30 16:29:38:427 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-30 16:29:38:427 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-30 16:29:38:428 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-30 16:29:38:428 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-10-30 16:29:38:429 action-translator LogManager.java:25 translate  $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) 
2023-10-30 16:29:38:430 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,250:29]
2023-10-30 16:29:38:430 action-translator LogManager.java:25 qattr [@-1,31:33='INT',<0>,250:58].[@-1,35:38='line',<0>,250:62]
2023-10-30 16:29:38:430 action-translator LogManager.java:25 qattr [@-1,42:44='INT',<0>,250:69].[@-1,46:48='pos',<0>,250:73]
2023-10-30 16:29:38:430 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,250:79].[@-1,57:57='e',<0>,250:84]
2023-10-30 16:29:38:430 action-translator LogManager.java:25 translate  $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) 
2023-10-30 16:29:38:430 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,251:31]
2023-10-30 16:29:38:430 action-translator LogManager.java:25 qattr [@-1,33:37='FLOAT',<0>,251:62].[@-1,39:42='line',<0>,251:68]
2023-10-30 16:29:38:430 action-translator LogManager.java:25 qattr [@-1,46:50='FLOAT',<0>,251:75].[@-1,52:54='pos',<0>,251:81]
2023-10-30 16:29:38:430 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,251:87].[@-1,63:63='e',<0>,251:92]
2023-10-30 16:29:38:431 action-translator LogManager.java:25 translate  $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) 
2023-10-30 16:29:38:431 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,252:29]
2023-10-30 16:29:38:431 action-translator LogManager.java:25 qattr [@-1,34:36='STR',<0>,252:61].[@-1,38:41='line',<0>,252:65]
2023-10-30 16:29:38:436 action-translator LogManager.java:25 qattr [@-1,45:47='STR',<0>,252:72].[@-1,49:51='pos',<0>,252:76]
2023-10-30 16:29:38:437 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,252:82].[@-1,60:60='e',<0>,252:87]
2023-10-30 16:29:38:439 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-10-30 16:29:38:440 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,256:31]
2023-10-30 16:29:38:440 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,256:62].[@-1,41:44='line',<0>,256:70]
2023-10-30 16:29:38:440 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,256:77].[@-1,56:58='pos',<0>,256:85]
2023-10-30 16:29:38:440 action-translator LogManager.java:25 qattr [@-1,62:71='listParams',<0>,256:91].[@-1,73:73='l',<0>,256:102]
2023-10-30 16:29:38:440 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) 
2023-10-30 16:29:38:440 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,257:20]
2023-10-30 16:29:38:440 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,257:51].[@-1,41:44='line',<0>,257:59]
2023-10-30 16:29:38:440 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,257:66].[@-1,56:58='pos',<0>,257:74]
2023-10-30 16:29:38:440 action-translator LogManager.java:25 translate  $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-10-30 16:29:38:441 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,258:7]
2023-10-30 16:29:38:441 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,258:42].[@-1,40:43='line',<0>,258:45]
2023-10-30 16:29:38:441 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,258:52].[@-1,50:52='pos',<0>,258:55]
2023-10-30 16:29:38:441 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,258:61].[@-1,59:62='text',<0>,258:64]
2023-10-30 16:29:38:442 action-translator LogManager.java:25 translate 
2023-10-30 16:29:38:442 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-30 16:29:38:442 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-30 16:29:38:442 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-30 16:29:38:442 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-30 16:29:38:442 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-30 16:29:38:442 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-30 16:29:38:442 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-10-30 16:29:38:443 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-10-30 16:29:38:443 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-10-30 16:29:38:443 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-10-30 16:29:38:443 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-30 16:29:38:444 action-translator LogManager.java:25 translate 
2023-10-30 16:29:38:444 action-translator LogManager.java:25 translate  $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-10-30 16:29:38:444 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-10-30 16:29:38:445 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:66].[@-1,36:39='line',<0>,2:69]
2023-10-30 16:29:38:445 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:76].[@-1,46:48='pos',<0>,2:79]
2023-10-30 16:29:38:445 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:85].[@-1,55:58='text',<0>,2:88]
2023-10-30 16:29:38:445 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-30 16:29:38:445 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(),$expr.e, $list.p) 
2023-10-30 16:29:38:445 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:132]
2023-10-30 16:29:38:456 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:164].[@-1,39:43='start',<0>,5:169]
2023-10-30 16:29:38:457 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:187].[@-1,62:66='start',<0>,5:192]
2023-10-30 16:29:38:457 action-translator LogManager.java:25 qattr [@-1,81:84='expr',<0>,5:211].[@-1,86:86='e',<0>,5:216]
2023-10-30 16:29:38:457 action-translator LogManager.java:25 qattr [@-1,90:93='list',<0>,5:220].[@-1,95:95='p',<0>,5:225]
2023-10-30 16:29:38:457 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-30 16:29:38:457 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2023-10-30 16:29:38:457 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2023-10-30 16:29:38:457 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2023-10-30 16:29:38:457 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2023-10-30 16:29:38:457 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2023-10-30 16:29:38:457 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2023-10-30 16:29:38:457 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-30 16:29:38:457 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-10-30 16:29:38:458 action-translator LogManager.java:25 translate  $cf = expressions.NewLlamadoFuncion($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-10-30 16:29:38:459 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,280:38]
2023-10-30 16:29:38:459 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,280:74].[@-1,41:44='line',<0>,280:77]
2023-10-30 16:29:38:459 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,280:84].[@-1,51:53='pos',<0>,280:87]
2023-10-30 16:29:38:459 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,280:93].[@-1,60:63='text',<0>,280:96]
2023-10-30 16:29:38:459 action-translator LogManager.java:25 qattr [@-1,67:80='listParamsCall',<0>,280:103].[@-1,82:82='l',<0>,280:118]
2023-10-30 16:29:38:459 action-translator LogManager.java:25 translate 
2023-10-30 16:29:38:459 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-10-30 16:29:38:459 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-10-30 16:29:38:460 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-10-30 16:29:38:460 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-10-30 16:29:38:460 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-10-30 16:29:38:461 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-30 16:29:38:462 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-10-30 16:29:38:462 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-30 16:29:38:463 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-10-30 16:29:38:463 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-10-30 16:29:38:463 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-10-30 16:29:38:463 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-10-30 16:29:38:464 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-30 16:29:38:464 action-translator LogManager.java:25 translate 
2023-10-30 16:29:38:465 action-translator LogManager.java:25 translate 
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                
2023-10-30 16:29:38:465 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:60].[@-1,108:111='text',<0>,4:63]
2023-10-30 16:29:38:465 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,4:70].[@-1,120:120='e',<0>,4:75]
2023-10-30 16:29:38:465 action-translator LogManager.java:25 attr [@-1,192:192='l',<0>,6:21]
2023-10-30 16:29:38:465 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-10-30 16:29:38:466 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,9:9]
2023-10-30 16:29:38:466 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-30 16:29:38:472 action-translator LogManager.java:25 translate 
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  
2023-10-30 16:29:38:472 action-translator LogManager.java:25 qattr [@-1,173:174='ID',<0>,15:94].[@-1,176:179='text',<0>,15:97]
2023-10-30 16:29:38:473 action-translator LogManager.java:25 qattr [@-1,183:186='expr',<0>,15:104].[@-1,188:188='e',<0>,15:109]
2023-10-30 16:29:38:473 action-translator LogManager.java:25 qattr [@-1,260:263='list',<0>,16:68].[@-1,265:265='l',<0>,16:73]
2023-10-30 16:29:38:473 action-translator LogManager.java:25 attr [@-1,332:332='l',<0>,17:55]
2023-10-30 16:29:38:473 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-30 16:29:39:013 action-translator LogManager.java:25 translate 
    import "Proyecto2_OLC2_2S2023_202101648/interfaces"
    import "Proyecto2_OLC2_2S2023_202101648/Environment"
    import "Proyecto2_OLC2_2S2023_202101648/expressions"
    import "Proyecto2_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-10-30 16:29:39:013 action-translator LogManager.java:25 translate 
    import "Proyecto2_OLC2_2S2023_202101648/interfaces"
    import "Proyecto2_OLC2_2S2023_202101648/Environment"
    import "Proyecto2_OLC2_2S2023_202101648/expressions"
    import "Proyecto2_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-10-30 16:29:39:123 action-translator LogManager.java:25 translate 
    import "Proyecto2_OLC2_2S2023_202101648/interfaces"
    import "Proyecto2_OLC2_2S2023_202101648/Environment"
    import "Proyecto2_OLC2_2S2023_202101648/expressions"
    import "Proyecto2_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-10-30 16:29:39:123 action-translator LogManager.java:25 translate 
    import "Proyecto2_OLC2_2S2023_202101648/interfaces"
    import "Proyecto2_OLC2_2S2023_202101648/Environment"
    import "Proyecto2_OLC2_2S2023_202101648/expressions"
    import "Proyecto2_OLC2_2S2023_202101648/instructions"
    import "strings"

